{"task_id": 11, "problem": "def remove_Occ(s,ch):\n    \"\"\" Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n", "contract": "", "function_name": "remove_Occ", "function_signature": "def remove_Occ(s,ch):\n", "canonical_solution": "\n    for i in range(len(s)): \n        if (s[i] == ch): \n             s = s[0 : i] + s[i + 1:] \n             break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n             s = s[0 : i] + s[i + 1:] \n             break\n    return s\n", "tests": ["test_out = remove_Occ(\"hello\",\"l\")\nassert test_out == \"heo\", f'outputs {test_out}'", "test_out = remove_Occ(\"abcda\",\"a\")\nassert test_out == \"bcd\", f'outputs {test_out}'", "test_out = remove_Occ(\"PHP\",\"P\")\nassert test_out == \"H\", f'outputs {test_out}'"], "atol": ""}
{"task_id": 12, "problem": "def sort_matrix(M):\n    \"\"\" Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n", "contract": "", "function_name": "sort_matrix", "function_signature": "def sort_matrix(M):\n", "canonical_solution": "\n    result = sorted(M, key=sum)\n    return result\n", "tests": ["test_out = sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\nassert test_out==[[1, 1, 1], [1, 2, 3], [2, 4, 5]], f'outputs {test_out}'", "test_out = sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])\nassert test_out==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]], f'outputs {test_out}'", "test_out = sort_matrix([[5,8,9],[6,4,3],[2,1,4]])\nassert test_out==[[2, 1, 4], [6, 4, 3], [5, 8, 9]], f'outputs {test_out}'"], "atol": ""}
{"task_id": 14, "problem": "def find_Volume(l,b,h) :\n    \"\"\" Write a python function to find the volume of a triangular prism.\n    \"\"\"\n", "contract": "", "function_name": "find_Volume", "function_signature": "def find_Volume(l,b,h) :\n", "canonical_solution": "\n    return ((l * b * h) / 2)\n", "tests": ["test_out = find_Volume(10,8,6)\nassert test_out == 240, f'outputs {test_out}'", "test_out = find_Volume(3,2,2)\nassert test_out == 6, f'outputs {test_out}'", "test_out = find_Volume(1,2,1)\nassert test_out == 1, f'outputs {test_out}'"], "atol": ""}
{"task_id": 16, "problem": "def text_lowercase_underscore(text):\n    \"\"\" Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n", "contract": "", "function_name": "text_lowercase_underscore", "function_signature": "def text_lowercase_underscore(text):\n", "canonical_solution": "    import re\n\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n         return True\n    else:\n         return False\n", "tests": ["test_out = text_lowercase_underscore(\"aab_cbbbc\")\nassert test_out==(True), f'outputs {test_out}'", "test_out = text_lowercase_underscore(\"aab_Abbbc\")\nassert test_out==(False), f'outputs {test_out}'", "test_out = text_lowercase_underscore(\"Aaab_abbbc\")\nassert test_out==(False), f'outputs {test_out}'"], "atol": ""}
{"task_id": 17, "problem": "def square_perimeter(a):\n    \"\"\" Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n", "contract": "", "function_name": "square_perimeter", "function_signature": "def square_perimeter(a):\n", "canonical_solution": "\n    perimeter=4*a\n    return perimeter\n", "tests": ["test_out = square_perimeter(10)\nassert test_out==40, f'outputs {test_out}'", "test_out = square_perimeter(5)\nassert test_out==20, f'outputs {test_out}'", "test_out = square_perimeter(4)\nassert test_out==16, f'outputs {test_out}'"], "atol": ""}
{"task_id": 18, "problem": "def remove_dirty_chars(string, second_string):\n    \"\"\" Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n", "contract": "", "function_name": "remove_dirty_chars", "function_signature": "def remove_dirty_chars(string, second_string):\n", "canonical_solution": "    NO_OF_CHARS = 256\n    def str_to_list(string):\n    \ttemp = []\n    \tfor x in string:\n    \t\ttemp.append(x)\n    \treturn temp\n    def lst_to_string(List):\n    \treturn ''.join(List)\n    def get_char_count_array(string):\n    \tcount = [0] * NO_OF_CHARS\n    \tfor i in string:\n    \t\tcount[ord(i)] += 1\n    \treturn count\n\n    count = get_char_count_array(second_string) \n    ip_ind = 0\n    res_ind = 0\n    temp = '' \n    str_list = str_to_list(string) \n    while ip_ind != len(str_list): \n        temp = str_list[ip_ind] \n        if count[ord(temp)] == 0: \n             str_list[res_ind] = str_list[ip_ind] \n             res_ind += 1\n        ip_ind+=1\n    return lst_to_string(str_list[0:res_ind])\n", "tests": ["test_out = remove_dirty_chars(\"probasscurve\", \"pros\")\nassert test_out == 'bacuve', f'outputs {test_out}'", "test_out = remove_dirty_chars(\"digitalindia\", \"talent\")\nassert test_out == 'digiidi', f'outputs {test_out}'", "test_out = remove_dirty_chars(\"exoticmiles\", \"toxic\")\nassert test_out == 'emles', f'outputs {test_out}'"], "atol": ""}
{"task_id": 19, "problem": "def test_duplicate(arraynums):\n    \"\"\" Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n", "contract": "", "function_name": "test_duplicate", "function_signature": "def test_duplicate(arraynums):\n", "canonical_solution": "\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)\n", "tests": ["test_out = test_duplicate(([1,2,3,4,5]))\nassert test_out==False, f'outputs {test_out}'", "test_out = test_duplicate(([1,2,3,4, 4]))\nassert test_out==True, f'outputs {test_out}'", "test_out = test_duplicate([1,1,2,2,3,3,4,4,5])\nassert test_out==True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 20, "problem": "def is_woodall(x):\n    \"\"\" Write a function to check if the given number is woodball or not.\n    \"\"\"\n", "contract": "", "function_name": "is_woodall", "function_signature": "def is_woodall(x):\n", "canonical_solution": "\n    if (x % 2 == 0): \n        return False\n    if (x == 1): \n        return True\n    x = x + 1 \n    p = 0\n    while (x % 2 == 0): \n        x = x/2\n        p = p + 1\n        if (p == x): \n             return True\n    return False\n", "tests": ["test_out = is_woodall(383)\nassert test_out == True, f'outputs {test_out}'", "test_out = is_woodall(254)\nassert test_out == False, f'outputs {test_out}'", "test_out = is_woodall(200)\nassert test_out == False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 56, "problem": "def check(n):\n    \"\"\" Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n", "contract": "", "function_name": "check", "function_signature": "def check(n):\n", "canonical_solution": "    def rev(num):\n        rev_num = 0\n        while (num > 0):\n            rev_num = (rev_num * 10 + num % 10)\n            num = num // 10\n        return rev_num\n\n    return (2 * rev(n) == n + 1)\n", "tests": ["test_out = check(70)\nassert test_out == False, f'outputs {test_out}'", "test_out = check(23)\nassert test_out == False, f'outputs {test_out}'", "test_out = check(73)\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 57, "problem": "def find_Max_Num(arr) :\n    \"\"\" Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n", "contract": "", "function_name": "find_Max_Num", "function_signature": "def find_Max_Num(arr) :\n", "canonical_solution": "\n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num\n", "tests": ["test_out = find_Max_Num([1,2,3])\nassert test_out == 321, f'outputs {test_out}'", "test_out = find_Max_Num([4,5,6,1])\nassert test_out == 6541, f'outputs {test_out}'", "test_out = find_Max_Num([1,2,3,9])\nassert test_out == 9321, f'outputs {test_out}'"], "atol": ""}
{"task_id": 58, "problem": "def opposite_Signs(x,y):\n    \"\"\" Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n", "contract": "", "function_name": "opposite_Signs", "function_signature": "def opposite_Signs(x,y):\n", "canonical_solution": "\n    return ((x ^ y) < 0)\n", "tests": ["test_out = opposite_Signs(1,-2)\nassert test_out == True, f'outputs {test_out}'", "test_out = opposite_Signs(3,2)\nassert test_out == False, f'outputs {test_out}'", "test_out = opposite_Signs(-10,-10)\nassert test_out == False, f'outputs {test_out}'", "test_out = opposite_Signs(-2,2)\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 59, "problem": "def is_octagonal(n):\n    \"\"\" Write a function to find the nth octagonal number.\n    \"\"\"\n", "contract": "", "function_name": "is_octagonal", "function_signature": "def is_octagonal(n):\n", "canonical_solution": "\n    return 3 * n * n - 2 * n\n", "tests": ["test_out = is_octagonal(5)\nassert test_out == 65, f'outputs {test_out}'", "test_out = is_octagonal(10)\nassert test_out == 280, f'outputs {test_out}'", "test_out = is_octagonal(15)\nassert test_out == 645, f'outputs {test_out}'"], "atol": ""}
{"task_id": 61, "problem": "def count_Substrings(s):\n    \"\"\" Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n", "contract": "", "function_name": "count_Substrings", "function_signature": "def count_Substrings(s):\n", "canonical_solution": "    from collections import defaultdict\n\n    n = len(s)\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count\n", "tests": ["test_out = count_Substrings('112112')\nassert test_out == 6, f'outputs {test_out}'", "test_out = count_Substrings('111')\nassert test_out == 6, f'outputs {test_out}'", "test_out = count_Substrings('1101112')\nassert test_out == 12, f'outputs {test_out}'"], "atol": ""}
{"task_id": 62, "problem": "def smallest_num(xs):\n    \"\"\" Write a python function to find smallest number in a list.\n    \"\"\"\n", "contract": "", "function_name": "smallest_num", "function_signature": "def smallest_num(xs):\n", "canonical_solution": "\n    return min(xs)\n", "tests": ["test_out = smallest_num([10, 20, 1, 45, 99])\nassert test_out == 1, f'outputs {test_out}'", "test_out = smallest_num([1, 2, 3])\nassert test_out == 1, f'outputs {test_out}'", "test_out = smallest_num([45, 46, 50, 60])\nassert test_out == 45, f'outputs {test_out}'"], "atol": ""}
{"task_id": 63, "problem": "def max_difference(test_list):\n    \"\"\" Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n", "contract": "", "function_name": "max_difference", "function_signature": "def max_difference(test_list):\n", "canonical_solution": "\n    temp = [abs(b - a) for a, b in test_list]\n    res = max(temp)\n    return (res)\n", "tests": ["test_out = max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\nassert test_out == 7, f'outputs {test_out}'", "test_out = max_difference([(4, 6), (2, 17), (9, 13), (11, 12)])\nassert test_out == 15, f'outputs {test_out}'", "test_out = max_difference([(12, 35), (21, 27), (13, 23), (41, 22)])\nassert test_out == 23, f'outputs {test_out}'"], "atol": ""}
{"task_id": 64, "problem": "def subject_marks(subjectmarks):\n    \"\"\" Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n", "contract": "", "function_name": "subject_marks", "function_signature": "def subject_marks(subjectmarks):\n", "canonical_solution": "\n    subjectmarks.sort(key    =    lambda    x:    x[1])\n    return    subjectmarks\n", "tests": ["test_out = subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\nassert test_out==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)], f'outputs {test_out}'", "test_out = subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])\nassert test_out==([('Social',33),('Telugu',49),('Hindhi',54)]), f'outputs {test_out}'", "test_out = subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])\nassert test_out==([('Biology',45),('Physics',96),('Chemistry',97)]), f'outputs {test_out}'"], "atol": ""}
{"task_id": 65, "problem": "def recursive_list_sum(data_list):\n    \"\"\" Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n", "contract": "", "function_name": "recursive_list_sum", "function_signature": "def recursive_list_sum(data_list):\n", "canonical_solution": "\n    total = 0\n    for element in data_list:\n        if type(element) == type([]):\n             total = total + recursive_list_sum(element)\n        else:\n             total = total + element\n    return total\n", "tests": ["test_out = recursive_list_sum(([1, 2, [3,4],[5,6]]))\nassert test_out==21, f'outputs {test_out}'", "test_out = recursive_list_sum(([7, 10, [15,14],[19,41]]))\nassert test_out==106, f'outputs {test_out}'", "test_out = recursive_list_sum(([10, 20, [30,40],[50,60]]))\nassert test_out==210, f'outputs {test_out}'"], "atol": ""}
{"task_id": 66, "problem": "def pos_count(list):\n    \"\"\" Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n", "contract": "", "function_name": "pos_count", "function_signature": "def pos_count(list):\n", "canonical_solution": "\n    pos_count= 0\n    for num in list: \n        if num >= 0: \n            pos_count += 1\n    return pos_count\n", "tests": ["test_out = pos_count([1,-2,3,-4])\nassert test_out == 2, f'outputs {test_out}'", "test_out = pos_count([3,4,5,-1])\nassert test_out == 3, f'outputs {test_out}'", "test_out = pos_count([1,2,3,4])\nassert test_out == 4, f'outputs {test_out}'"], "atol": ""}
{"task_id": 67, "problem": "def bell_number(n):\n    \"\"\" Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n", "contract": "", "function_name": "bell_number", "function_signature": "def bell_number(n):\n", "canonical_solution": "\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n             bell[i][j] = bell[i-1][j-1] + bell[i][j-1]    \n    return bell[n][0]\n", "tests": ["test_out = bell_number(2)\nassert test_out==2, f'outputs {test_out}'", "test_out = bell_number(10)\nassert test_out==115975, f'outputs {test_out}'", "test_out = bell_number(56)\nassert test_out==6775685320645824322581483068371419745979053216268760300, f'outputs {test_out}'"], "atol": ""}
{"task_id": 68, "problem": "def is_Monotonic(A):\n    \"\"\" Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n", "contract": "", "function_name": "is_Monotonic", "function_signature": "def is_Monotonic(A):\n", "canonical_solution": "\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n             all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n", "tests": ["test_out = is_Monotonic([6, 5, 4, 4])\nassert test_out == True, f'outputs {test_out}'", "test_out = is_Monotonic([1, 2, 2, 3])\nassert test_out == True, f'outputs {test_out}'", "test_out = is_Monotonic([1, 3, 2])\nassert test_out == False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 69, "problem": "def is_sublist(l, s):\n    \"\"\" Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n", "contract": "", "function_name": "is_sublist", "function_signature": "def is_sublist(l, s):\n", "canonical_solution": "\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n             if l[i] == s[0]:\n                 n = 1\n                 while (n < len(s)) and (l[i+n] == s[n]):\n                     n += 1                 \n                 if n == len(s):\n                     sub_set = True\n    return sub_set\n", "tests": ["test_out = is_sublist([2,4,3,5,7],[3,7])\nassert test_out==False, f'outputs {test_out}'", "test_out = is_sublist([2,4,3,5,7],[4,3])\nassert test_out==True, f'outputs {test_out}'", "test_out = is_sublist([2,4,3,5,7],[1,6])\nassert test_out==False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 70, "problem": "def get_equal(Input):\n    \"\"\" Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n", "contract": "", "function_name": "get_equal", "function_signature": "def get_equal(Input):\n", "canonical_solution": "    def find_equal_tuple(Input):\n      k = 0 if not Input else len(Input[0])\n      flag = 1\n      for tuple in Input:\n        if len(tuple) != k:\n          flag = 0\n          break\n      return flag\n\n    return find_equal_tuple(Input) == 1\n", "tests": ["test_out = get_equal([(11, 22, 33), (44, 55, 66)])\nassert test_out == True, f'outputs {test_out}'", "test_out = get_equal([(1, 2, 3), (4, 5, 6, 7)])\nassert test_out == False, f'outputs {test_out}'", "test_out = get_equal([(1, 2), (3, 4)])\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 71, "problem": "def comb_sort(nums):\n    \"\"\" Write a function to sort a list of elements.\n    \"\"\"\n", "contract": "", "function_name": "comb_sort", "function_signature": "def comb_sort(nums):\n", "canonical_solution": "\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n             if nums[i] > nums[i+gaps]:\n                 nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                 swapped = True\n             i += 1\n    return nums\n", "tests": ["test_out = comb_sort([5, 15, 37, 25, 79])\nassert test_out == [5, 15, 25, 37, 79], f'outputs {test_out}'", "test_out = comb_sort([41, 32, 15, 19, 22])\nassert test_out == [15, 19, 22, 32, 41], f'outputs {test_out}'", "test_out = comb_sort([99, 15, 13, 47])\nassert test_out == [13, 15, 47, 99], f'outputs {test_out}'"], "atol": ""}
{"task_id": 72, "problem": "def dif_Square(n):\n    \"\"\" Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n", "contract": "", "function_name": "dif_Square", "function_signature": "def dif_Square(n):\n", "canonical_solution": "\n    if (n % 4 != 2): \n        return True\n    return False\n", "tests": ["test_out = dif_Square(5)\nassert test_out == True, f'outputs {test_out}'", "test_out = dif_Square(10)\nassert test_out == False, f'outputs {test_out}'", "test_out = dif_Square(15)\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 74, "problem": "def is_samepatterns(colors, patterns):\n    \"\"\" Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n", "contract": "", "function_name": "is_samepatterns", "function_signature": "def is_samepatterns(colors, patterns):\n", "canonical_solution": "\n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n             sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False    \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n             if values[i] != values[i+1]:\n                 return False\n\n    return True\n", "tests": ["test_out = is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])\nassert test_out==True, f'outputs {test_out}'", "test_out = is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])\nassert test_out==False, f'outputs {test_out}'", "test_out = is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])\nassert test_out==False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 75, "problem": "def find_tuples(test_list, K):\n    \"\"\" Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n", "contract": "", "function_name": "find_tuples", "function_signature": "def find_tuples(test_list, K):\n", "canonical_solution": "\n    res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return res\n", "tests": ["test_out = find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\nassert test_out == [(6, 24, 12)], f'outputs {test_out}'", "test_out = find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5)\nassert test_out == [(5, 25, 30)], f'outputs {test_out}'", "test_out = find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4)\nassert test_out == [(8, 16, 4)], f'outputs {test_out}'"], "atol": ""}
{"task_id": 77, "problem": "def is_Diff(n):\n    \"\"\" Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n", "contract": "", "function_name": "is_Diff", "function_signature": "def is_Diff(n):\n", "canonical_solution": "\n    return (n % 11 == 0)\n", "tests": ["test_out = is_Diff(12345)\nassert is_Diff (12345) == False, f'outputs {test_out}'", "test_out = is_Diff(1212112)\nassert test_out == True, f'outputs {test_out}'", "test_out = is_Diff(1212)\nassert test_out == False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 79, "problem": "def word_len(s):\n    \"\"\" Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n", "contract": "", "function_name": "word_len", "function_signature": "def word_len(s):\n", "canonical_solution": "\n    s = s.split(' ')    \n    for word in s:    \n        if len(word)%2!=0: \n             return True  \n        else:\n           return False\n", "tests": ["test_out = word_len(\"Hadoop\")\nassert test_out == False, f'outputs {test_out}'", "test_out = word_len(\"great\")\nassert test_out == True, f'outputs {test_out}'", "test_out = word_len(\"structure\")\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 80, "problem": "def tetrahedral_number(n):\n    \"\"\" Write a function to find the nth tetrahedral number.\n    \"\"\"\n", "contract": "", "function_name": "tetrahedral_number", "function_signature": "def tetrahedral_number(n):\n", "canonical_solution": "\n    return (n * (n + 1) * (n + 2)) / 6\n", "tests": ["test_out = tetrahedral_number(5)\nassert test_out == 35, f'outputs {test_out}'", "test_out = tetrahedral_number(6)\nassert test_out == 56, f'outputs {test_out}'", "test_out = tetrahedral_number(7)\nassert test_out == 84, f'outputs {test_out}'"], "atol": ""}
{"task_id": 82, "problem": "def volume_sphere(r):\n    \"\"\" Write a function to find the volume of a sphere.\n    \"\"\"\n", "contract": "", "function_name": "volume_sphere", "function_signature": "def volume_sphere(r):\n", "canonical_solution": "    import math\n\n    volume=(4/3)*math.pi*r*r*r\n    return volume\n", "tests": ["import math\ntest_out = volume_sphere(10)\nassert math.isclose(test_out, 4188.790204786391, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = volume_sphere(25)\nassert math.isclose(test_out, 65449.84694978735, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = volume_sphere(20)\nassert math.isclose(test_out, 33510.32163829113, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 83, "problem": "def get_Char(strr):\n    \"\"\" Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n", "contract": "", "function_name": "get_Char", "function_signature": "def get_Char(strr):\n", "canonical_solution": "\n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)\n", "tests": ["test_out = get_Char(\"abc\")\nassert test_out == \"f\", f'outputs {test_out}'", "test_out = get_Char(\"gfg\")\nassert test_out == \"t\", f'outputs {test_out}'", "test_out = get_Char(\"ab\")\nassert test_out == \"c\", f'outputs {test_out}'"], "atol": ""}
{"task_id": 84, "problem": "def sequence(n):\n    \"\"\" Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n", "contract": "", "function_name": "sequence", "function_signature": "def sequence(n):\n", "canonical_solution": "\n    if n == 1 or n == 2: \n        return 1\n    else: \n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n", "tests": ["test_out = sequence(10)\nassert test_out == 6, f'outputs {test_out}'", "test_out = sequence(2)\nassert test_out == 1, f'outputs {test_out}'", "test_out = sequence(3)\nassert test_out == 2, f'outputs {test_out}'"], "atol": ""}
{"task_id": 85, "problem": "def surfacearea_sphere(r):\n    \"\"\" Write a function to find the surface area of a sphere.\n    \"\"\"\n", "contract": "", "function_name": "surfacearea_sphere", "function_signature": "def surfacearea_sphere(r):\n", "canonical_solution": "    import math\n\n    surfacearea=4*math.pi*r*r\n    return surfacearea\n", "tests": ["import math\ntest_out = surfacearea_sphere(10)\nassert math.isclose(test_out, 1256.6370614359173, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = surfacearea_sphere(15)\nassert math.isclose(test_out, 2827.4333882308138, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = surfacearea_sphere(20)\nassert math.isclose(test_out, 5026.548245743669, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 86, "problem": "def centered_hexagonal_number(n):\n    \"\"\" Write a function to find nth centered hexagonal number.\n    \"\"\"\n", "contract": "", "function_name": "centered_hexagonal_number", "function_signature": "def centered_hexagonal_number(n):\n", "canonical_solution": "\n    return 3 * n * (n - 1) + 1\n", "tests": ["test_out = centered_hexagonal_number(10)\nassert test_out == 271, f'outputs {test_out}'", "test_out = centered_hexagonal_number(2)\nassert test_out == 7, f'outputs {test_out}'", "test_out = centered_hexagonal_number(9)\nassert test_out == 217, f'outputs {test_out}'"], "atol": ""}
{"task_id": 87, "problem": "def merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\" Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n", "contract": "", "function_name": "merge_dictionaries_three", "function_signature": "def merge_dictionaries_three(dict1,dict2, dict3):\n", "canonical_solution": "    import collections as ct\n\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\n", "tests": ["test_out = merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\nassert test_out=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}, f'outputs {test_out}'", "test_out = merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})\nassert test_out=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}, f'outputs {test_out}'", "test_out = merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })\nassert test_out=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}, f'outputs {test_out}'"], "atol": ""}
{"task_id": 88, "problem": "def freq_count(list1):\n    \"\"\" Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n", "contract": "", "function_name": "freq_count", "function_signature": "def freq_count(list1):\n", "canonical_solution": "    import collections\n\n    freq_count= collections.Counter(list1)\n    return freq_count\n", "tests": ["test_out = freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\nassert test_out==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}), f'outputs {test_out}'", "test_out = freq_count([1,2,3,4,3,2,4,1,3,1,4])\nassert test_out==({1:3, 2:2,3:3,4:3}), f'outputs {test_out}'", "test_out = freq_count([5,6,7,4,9,10,4,5,6,7,9,5])\nassert test_out==({10:1,5:3,6:2,7:2,4:2,9:2}), f'outputs {test_out}'"], "atol": ""}
{"task_id": 89, "problem": "def closest_num(N):\n    \"\"\" Write a function to find the closest smaller number than n.\n    \"\"\"\n", "contract": "", "function_name": "closest_num", "function_signature": "def closest_num(N):\n", "canonical_solution": "\n    return (N - 1)\n", "tests": ["test_out = closest_num(11)\nassert test_out == 10, f'outputs {test_out}'", "test_out = closest_num(7)\nassert test_out == 6, f'outputs {test_out}'", "test_out = closest_num(12)\nassert test_out == 11, f'outputs {test_out}'"], "atol": ""}
{"task_id": 90, "problem": "def len_log(list1):\n    \"\"\" Write a python function to find the length of the longest word.\n    \"\"\"\n", "contract": "", "function_name": "len_log", "function_signature": "def len_log(list1):\n", "canonical_solution": "\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n             max=len(i)\n    return max\n", "tests": ["test_out = len_log([\"python\",\"PHP\",\"bigdata\"])\nassert test_out == 7, f'outputs {test_out}'", "test_out = len_log([\"a\",\"ab\",\"abc\"])\nassert test_out == 3, f'outputs {test_out}'", "test_out = len_log([\"small\",\"big\",\"tall\"])\nassert test_out == 5, f'outputs {test_out}'"], "atol": ""}
{"task_id": 91, "problem": "def find_substring(str1, sub_str):\n    \"\"\" Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n", "contract": "", "function_name": "find_substring", "function_signature": "def find_substring(str1, sub_str):\n", "canonical_solution": "\n    if any(sub_str in s for s in str1):\n         return True\n    return False\n", "tests": ["test_out = find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")\nassert test_out==True, f'outputs {test_out}'", "test_out = find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")\nassert test_out==False, f'outputs {test_out}'", "test_out = find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")\nassert test_out==True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 92, "problem": "def is_undulating(n):\n    \"\"\" Write a function to check whether the given number is undulating or not.\n    \"\"\"\n", "contract": "", "function_name": "is_undulating", "function_signature": "def is_undulating(n):\n", "canonical_solution": "\n    n = str(n)\n    if (len(n) <= 2): \n        return False\n    for i in range(2, len(n)): \n        if (n[i - 2] != n[i]): \n             return False\n    return True\n", "tests": ["test_out = is_undulating(1212121)\nassert test_out == True, f'outputs {test_out}'", "test_out = is_undulating(1991)\nassert test_out == False, f'outputs {test_out}'", "test_out = is_undulating(121)\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 93, "problem": "def power(a,b):\n    \"\"\" Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n", "contract": "", "function_name": "power", "function_signature": "def power(a,b):\n", "canonical_solution": "\n    if b==0:\n        return 1\n    elif a==0:\n        return 0\n    elif b==1:\n        return a\n    else:\n        return a*power(a,b-1)\n", "tests": ["test_out = power(3,4)\nassert test_out == 81, f'outputs {test_out}'", "test_out = power(2,3)\nassert test_out == 8, f'outputs {test_out}'", "test_out = power(5,5)\nassert test_out == 3125, f'outputs {test_out}'"], "atol": ""}
{"task_id": 94, "problem": "def index_minimum(test_list):\n    \"\"\" Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n", "contract": "", "function_name": "index_minimum", "function_signature": "def index_minimum(test_list):\n", "canonical_solution": "    from operator import itemgetter\n\n    res = min(test_list, key = itemgetter(1))[0]\n    return (res)\n", "tests": ["test_out = index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\nassert test_out == 'Varsha', f'outputs {test_out}'", "test_out = index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)])\nassert test_out == 'Dawood', f'outputs {test_out}'", "test_out = index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)])\nassert test_out == 'Ayesha', f'outputs {test_out}'"], "atol": ""}
{"task_id": 95, "problem": "def Find_Min_Length(lst):\n    \"\"\" Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n", "contract": "", "function_name": "Find_Min_Length", "function_signature": "def Find_Min_Length(lst):\n", "canonical_solution": "\n    minLength = min(len(x) for x in lst )\n    return minLength\n", "tests": ["test_out = Find_Min_Length([[1],[1,2]])\nassert test_out == 1, f'outputs {test_out}'", "test_out = Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]])\nassert test_out == 2, f'outputs {test_out}'", "test_out = Find_Min_Length([[3,3,3],[4,4,4,4]])\nassert test_out == 3, f'outputs {test_out}'"], "atol": ""}
{"task_id": 96, "problem": "def divisor(n):\n    \"\"\" Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n", "contract": "", "function_name": "divisor", "function_signature": "def divisor(n):\n", "canonical_solution": "\n    for i in range(n):\n        x = len([i for i in range(1,n+1) if not n % i])\n    return x\n", "tests": ["test_out = divisor(15)\nassert test_out == 4, f'outputs {test_out}'", "test_out = divisor(12)\nassert test_out == 6, f'outputs {test_out}'", "test_out = divisor(9)\nassert test_out == 3, f'outputs {test_out}'"], "atol": ""}
{"task_id": 97, "problem": "def frequency_lists(list1):\n    \"\"\" Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n", "contract": "", "function_name": "frequency_lists", "function_signature": "def frequency_lists(list1):\n", "canonical_solution": "\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n             dic_data[num] += 1\n        else:\n             key = num\n             value = 1\n             dic_data[key] = value\n    return dic_data\n", "tests": ["test_out = frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\nassert test_out=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}, f'outputs {test_out}'", "test_out = frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\nassert test_out=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}, f'outputs {test_out}'", "test_out = frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])\nassert test_out=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}, f'outputs {test_out}'"], "atol": ""}
{"task_id": 98, "problem": "def multiply_num(numbers):\n    \"\"\" Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n", "contract": "", "function_name": "multiply_num", "function_signature": "def multiply_num(numbers):\n", "canonical_solution": "\n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers)\n", "tests": ["import math\ntest_out = multiply_num((8, 2, 3, -1, 7))\nassert math.isclose(test_out, -67.2, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = multiply_num((-10,-20,-30))\nassert math.isclose(test_out, -2000.0, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = multiply_num((19,15,18))\nassert math.isclose(test_out, 1710.0, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 99, "problem": "def decimal_to_binary(n):\n    \"\"\" Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n", "contract": "", "function_name": "decimal_to_binary", "function_signature": "def decimal_to_binary(n):\n", "canonical_solution": "\n    return bin(n).replace(\"0b\",\"\")\n", "tests": ["test_out = decimal_to_binary(8)\nassert test_out == '1000', f'outputs {test_out}'", "test_out = decimal_to_binary(18)\nassert test_out == '10010', f'outputs {test_out}'", "test_out = decimal_to_binary(7)\nassert test_out == '111', f'outputs {test_out}'"], "atol": ""}
{"task_id": 100, "problem": "def next_smallest_palindrome(num):\n    \"\"\" Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n", "contract": "", "function_name": "next_smallest_palindrome", "function_signature": "def next_smallest_palindrome(num):\n", "canonical_solution": "    import sys\n\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n             return i\n", "tests": ["test_out = next_smallest_palindrome(99)\nassert test_out==101, f'outputs {test_out}'", "test_out = next_smallest_palindrome(1221)\nassert test_out==1331, f'outputs {test_out}'", "test_out = next_smallest_palindrome(120)\nassert test_out==121, f'outputs {test_out}'"], "atol": ""}
{"task_id": 101, "problem": "def kth_element(arr, k):\n    \"\"\" Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n", "contract": "", "function_name": "kth_element", "function_signature": "def kth_element(arr, k):\n", "canonical_solution": "\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] == arr[j+1], arr[j]\n    return arr[k-1]\n", "tests": ["test_out = kth_element([12,3,5,7,19], 2)\nassert test_out == 3, f'outputs {test_out}'", "test_out = kth_element([17,24,8,23], 3)\nassert test_out == 8, f'outputs {test_out}'", "test_out = kth_element([16,21,25,36,4], 4)\nassert test_out == 36, f'outputs {test_out}'"], "atol": ""}
{"task_id": 102, "problem": "def snake_to_camel(word):\n    \"\"\" Write a function to convert a snake case string to camel case string.\n    \"\"\"\n", "contract": "", "function_name": "snake_to_camel", "function_signature": "def snake_to_camel(word):\n", "canonical_solution": "\n    import re\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "tests": ["test_out = snake_to_camel('python_program')\nassert test_out=='PythonProgram', f'outputs {test_out}'", "test_out = snake_to_camel('python_language')\nassert test_out==('PythonLanguage'), f'outputs {test_out}'", "test_out = snake_to_camel('programming_language')\nassert test_out==('ProgrammingLanguage'), f'outputs {test_out}'"], "atol": ""}
{"task_id": 103, "problem": "def eulerian_num(n, m):\n    \"\"\" Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n", "contract": "", "function_name": "eulerian_num", "function_signature": "def eulerian_num(n, m):\n", "canonical_solution": "\n    if (m >= n or n == 0): \n        return 0 \n    if (m == 0): \n        return 1 \n    return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))\n", "tests": ["test_out = eulerian_num(3, 1)\nassert test_out == 4, f'outputs {test_out}'", "test_out = eulerian_num(4, 1)\nassert test_out == 11, f'outputs {test_out}'", "test_out = eulerian_num(5, 3)\nassert test_out == 26, f'outputs {test_out}'"], "atol": ""}
{"task_id": 104, "problem": "def sort_sublists(input_list):\n    \"\"\" Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n", "contract": "", "function_name": "sort_sublists", "function_signature": "def sort_sublists(input_list):\n", "canonical_solution": "\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n", "tests": ["test_out = sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))\nassert test_out==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']], f'outputs {test_out}'", "test_out = sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))\nassert test_out==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']], f'outputs {test_out}'", "test_out = sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))\nassert test_out==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']], f'outputs {test_out}'"], "atol": ""}
{"task_id": 105, "problem": "def count(lst):\n    \"\"\" Write a python function to count true booleans in the given list.\n    \"\"\"\n", "contract": "", "function_name": "count", "function_signature": "def count(lst):\n", "canonical_solution": "\n    return sum(lst)\n", "tests": ["test_out = count([True,False,True])\nassert test_out == 2, f'outputs {test_out}'", "test_out = count([False,False])\nassert test_out == 0, f'outputs {test_out}'", "test_out = count([True,True,True])\nassert test_out == 3, f'outputs {test_out}'"], "atol": ""}
{"task_id": 106, "problem": "def add_lists(test_list, test_tup):\n    \"\"\" Write a function to append the given list to the given tuples.\n    \"\"\"\n", "contract": "", "function_name": "add_lists", "function_signature": "def add_lists(test_list, test_tup):\n", "canonical_solution": "\n    res = tuple(list(test_tup) + test_list)\n    return (res)\n", "tests": ["test_out = add_lists([5, 6, 7], (9, 10))\nassert test_out == (9, 10, 5, 6, 7), f'outputs {test_out}'", "test_out = add_lists([6, 7, 8], (10, 11))\nassert test_out == (10, 11, 6, 7, 8), f'outputs {test_out}'", "test_out = add_lists([7, 8, 9], (11, 12))\nassert test_out == (11, 12, 7, 8, 9), f'outputs {test_out}'"], "atol": ""}
{"task_id": 108, "problem": "def merge_sorted_list(num1,num2,num3):\n    \"\"\" Write a function to merge three lists into a single sorted list.\n    \"\"\"\n", "contract": "", "function_name": "merge_sorted_list", "function_signature": "def merge_sorted_list(num1,num2,num3):\n", "canonical_solution": "    import heapq\n\n    num1=sorted(num1)\n    num2=sorted(num2)\n    num3=sorted(num3)\n    result = heapq.merge(num1,num2,num3)\n    return list(result)\n", "tests": ["test_out = merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])\nassert test_out==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233], f'outputs {test_out}'", "test_out = merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])\nassert test_out==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12], f'outputs {test_out}'", "test_out = merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])\nassert test_out==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85], f'outputs {test_out}'"], "atol": ""}
{"task_id": 109, "problem": "def odd_Equivalent(s,n):\n    \"\"\" Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n", "contract": "", "function_name": "odd_Equivalent", "function_signature": "def odd_Equivalent(s,n):\n", "canonical_solution": "\n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n             count = count + 1\n    return count\n", "tests": ["test_out = odd_Equivalent(\"011001\",6)\nassert test_out == 3, f'outputs {test_out}'", "test_out = odd_Equivalent(\"11011\",5)\nassert test_out == 4, f'outputs {test_out}'", "test_out = odd_Equivalent(\"1010\",4)\nassert test_out == 2, f'outputs {test_out}'"], "atol": ""}
{"task_id": 111, "problem": "def common_in_nested_lists(nestedlist):\n    \"\"\" Write a function to find the common elements in given nested lists.\n    \"\"\"\n", "contract": "", "function_name": "common_in_nested_lists", "function_signature": "def common_in_nested_lists(nestedlist):\n", "canonical_solution": "\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result\n", "tests": ["test_out = common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\nassert set(test_out)==set([18, 12]), f'outputs {test_out}'", "test_out = common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])\nassert set(test_out)==set([5,23]), f'outputs {test_out}'", "test_out = common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])\nassert set(test_out)==set([4]), f'outputs {test_out}'"], "atol": ""}
{"task_id": 113, "problem": "def check_integer(text):\n    \"\"\" Write a function to check if a string represents an integer or not.\n    \"\"\"\n", "contract": "", "function_name": "check_integer", "function_signature": "def check_integer(text):\n", "canonical_solution": "\n    text    =    text.strip()\n    if    len(text)    <    1:\n                return    None\n    else:\n                    if    all(text[i]    in    \"0123456789\"    for    i    in    range(len(text))):\n                                        return    True\n                    elif    (text[0]    in    \"+-\")    and    \\\n                                    all(text[i]    in    \"0123456789\"    for    i    in    range(1,len(text))):\n                                    return    True\n                    else:\n                                return    False\n", "tests": ["test_out = check_integer(\"python\")\nassert test_out==False, f'outputs {test_out}'", "test_out = check_integer(\"1\")\nassert test_out==True, f'outputs {test_out}'", "test_out = check_integer(\"12345\")\nassert test_out==True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 115, "problem": "def empty_dit(list1):\n    \"\"\" Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n", "contract": "", "function_name": "empty_dit", "function_signature": "def empty_dit(list1):\n", "canonical_solution": "\n    empty_dit=all(not    d    for    d    in    list1)\n    return    empty_dit\n", "tests": ["test_out = empty_dit([{},{},{}])\nassert test_out==True, f'outputs {test_out}'", "test_out = empty_dit([{1,2},{},{}])\nassert test_out==False, f'outputs {test_out}'", "test_out = empty_dit({})\nassert test_out==True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 116, "problem": "def tuple_to_int(nums):\n    \"\"\" Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n", "contract": "", "function_name": "tuple_to_int", "function_signature": "def tuple_to_int(nums):\n", "canonical_solution": "\n    result = int(''.join(map(str,nums)))\n    return result\n", "tests": ["test_out = tuple_to_int((1,2,3))\nassert test_out==123, f'outputs {test_out}'", "test_out = tuple_to_int((4,5,6))\nassert test_out==456, f'outputs {test_out}'", "test_out = tuple_to_int((5,6,7))\nassert test_out==567, f'outputs {test_out}'"], "atol": ""}
{"task_id": 117, "problem": "def list_to_float(test_list):\n    \"\"\" Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n", "contract": "", "function_name": "list_to_float", "function_signature": "def list_to_float(test_list):\n", "canonical_solution": "\n    res = []\n    for tup in test_list:\n        temp = []\n        for ele in tup:\n            if ele.isalpha():\n                temp.append(ele)\n            else:\n                temp.append(float(ele))\n        res.append((temp[0],temp[1])) \n    return res\n", "tests": ["test_out = list_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] )\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)], f'outputs {test_out}'", "test_out = list_to_float([(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] )\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)], f'outputs {test_out}'", "test_out = list_to_float([(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] )\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)], f'outputs {test_out}'"], "atol": ""}
{"task_id": 118, "problem": "def string_to_list(string):\n    \"\"\" Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n", "contract": "", "function_name": "string_to_list", "function_signature": "def string_to_list(string):\n", "canonical_solution": "\n    lst = list(string.split(\" \")) \n    return lst\n", "tests": ["test_out = string_to_list(\"python programming\")\nassert test_out==['python','programming'], f'outputs {test_out}'", "test_out = string_to_list(\"lists tuples strings\")\nassert test_out==['lists','tuples','strings'], f'outputs {test_out}'", "test_out = string_to_list(\"write a program\")\nassert test_out==['write','a','program'], f'outputs {test_out}'"], "atol": ""}
{"task_id": 119, "problem": "def search(arr):\n    \"\"\" Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n", "contract": "", "function_name": "search", "function_signature": "def search(arr):\n", "canonical_solution": "\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\n", "tests": ["test_out = search([1,1,2,2,3])\nassert test_out == 3, f'outputs {test_out}'", "test_out = search([1,1,3,3,4,4,5,5,7,7,8])\nassert test_out == 8, f'outputs {test_out}'", "test_out = search([1,2,2,3,3,4,4])\nassert test_out == 1, f'outputs {test_out}'"], "atol": ""}
{"task_id": 120, "problem": "def max_product_tuple(list1):\n    \"\"\" Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n", "contract": "", "function_name": "max_product_tuple", "function_signature": "def max_product_tuple(list1):\n", "canonical_solution": "\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max\n", "tests": ["test_out = max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\nassert test_out==36, f'outputs {test_out}'", "test_out = max_product_tuple([(10,20), (15,2), (5,10)] )\nassert test_out==200, f'outputs {test_out}'", "test_out = max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )\nassert test_out==484, f'outputs {test_out}'"], "atol": ""}
{"task_id": 123, "problem": "def amicable_numbers_sum(limit):\n    \"\"\" Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n", "contract": "", "function_name": "amicable_numbers_sum", "function_signature": "def amicable_numbers_sum(limit):\n", "canonical_solution": "\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n             continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n             amicables.add(num)\n             amicables.add(sum_fact2)\n    return sum(amicables)\n", "tests": ["test_out = amicable_numbers_sum(999)\nassert test_out==504, f'outputs {test_out}'", "test_out = amicable_numbers_sum(9999)\nassert test_out==31626, f'outputs {test_out}'", "test_out = amicable_numbers_sum(99)\nassert test_out==0, f'outputs {test_out}'"], "atol": ""}
{"task_id": 124, "problem": "def angle_complex(a,b):\n    \"\"\" Write a function to get the angle of a complex number.\n    \"\"\"\n", "contract": "", "function_name": "angle_complex", "function_signature": "def angle_complex(a,b):\n", "canonical_solution": "    import cmath\n\n    cn=complex(a,b)\n    angle=cmath.phase(a+b)\n    return angle\n", "tests": ["import math\ntest_out = angle_complex(0,1j)\nassert math.isclose(test_out, 1.5707963267948966, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = angle_complex(2,1j)\nassert math.isclose(test_out, 0.4636476090008061, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = angle_complex(0,2j)\nassert math.isclose(test_out, 1.5707963267948966, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 125, "problem": "def find_length(string):\n    \"\"\" Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n", "contract": "", "function_name": "find_length", "function_signature": "def find_length(string):\n", "canonical_solution": "\n    n = len(string)\n    current_sum = 0\n    max_sum = 0\n    for i in range(n): \n        current_sum += (1 if string[i] == '0' else -1) \n        if current_sum < 0: \n             current_sum = 0\n        max_sum = max(current_sum, max_sum) \n    return max_sum if max_sum else 0\n", "tests": ["test_out = find_length(\"11000010001\")\nassert test_out == 6, f'outputs {test_out}'", "test_out = find_length(\"10111\")\nassert test_out == 1, f'outputs {test_out}'", "test_out = find_length(\"11011101100101\")\nassert test_out == 2, f'outputs {test_out}'"], "atol": ""}
{"task_id": 126, "problem": "def sum(a,b):\n    \"\"\" Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n", "contract": "", "function_name": "sum", "function_signature": "def sum(a,b):\n", "canonical_solution": "\n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n             sum += i \n    return sum\n", "tests": ["test_out = sum(10,15)\nassert test_out == 6, f'outputs {test_out}'", "test_out = sum(100,150)\nassert test_out == 93, f'outputs {test_out}'", "test_out = sum(4,6)\nassert test_out == 3, f'outputs {test_out}'"], "atol": ""}
{"task_id": 127, "problem": "def multiply_int(x, y):\n    \"\"\" Write a function to multiply two integers.\n    \"\"\"\n", "contract": "", "function_name": "multiply_int", "function_signature": "def multiply_int(x, y):\n", "canonical_solution": "\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)\n", "tests": ["test_out = multiply_int(10,20)\nassert test_out==200, f'outputs {test_out}'", "test_out = multiply_int(5,10)\nassert test_out==50, f'outputs {test_out}'", "test_out = multiply_int(4,8)\nassert test_out==32, f'outputs {test_out}'"], "atol": ""}
{"task_id": 128, "problem": "def long_words(n, str):\n    \"\"\" Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n", "contract": "", "function_name": "long_words", "function_signature": "def long_words(n, str):\n", "canonical_solution": "\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n             word_len.append(x)\n    return word_len\n", "tests": ["test_out = long_words(3,\"python is a programming language\")\nassert test_out==['python','programming','language'], f'outputs {test_out}'", "test_out = long_words(2,\"writing a program\")\nassert test_out==['writing','program'], f'outputs {test_out}'", "test_out = long_words(5,\"sorting list\")\nassert test_out==['sorting'], f'outputs {test_out}'"], "atol": ""}
{"task_id": 129, "problem": "def magic_square_test(my_matrix):\n    \"\"\" Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n", "contract": "", "function_name": "magic_square_test", "function_signature": "def magic_square_test(my_matrix):\n", "canonical_solution": "\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])    \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)       \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True\n", "tests": ["test_out = magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\nassert test_out==True, f'outputs {test_out}'", "test_out = magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\nassert test_out==True, f'outputs {test_out}'", "test_out = magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])\nassert test_out==False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 130, "problem": "def max_occurrences(nums):\n    \"\"\" Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n", "contract": "", "function_name": "max_occurrences", "function_signature": "def max_occurrences(nums):\n", "canonical_solution": "    from collections import defaultdict\n\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result[0]\n", "tests": ["test_out = max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\nassert test_out==2, f'outputs {test_out}'", "test_out = max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])\nassert test_out==8, f'outputs {test_out}'", "test_out = max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])\nassert test_out==20, f'outputs {test_out}'"], "atol": ""}
{"task_id": 131, "problem": "def reverse_vowels(str1):\n    \"\"\" Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    \"\"\"\n", "contract": "", "function_name": "reverse_vowels", "function_signature": "def reverse_vowels(str1):\n", "canonical_solution": "\n    vowels = \"\"\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n             vowels += char\n    result_string = \"\"\n    for char in str1:\n        if char in \"aeiouAEIOU\":\n             result_string += vowels[-1]\n             vowels = vowels[:-1]\n        else:\n             result_string += char\n    return result_string\n", "tests": ["test_out = reverse_vowels(\"Python\")\nassert test_out == \"Python\", f'outputs {test_out}'", "test_out = reverse_vowels(\"USA\")\nassert test_out == \"ASU\", f'outputs {test_out}'", "test_out = reverse_vowels(\"ab\")\nassert test_out == \"ab\", f'outputs {test_out}'"], "atol": ""}
{"task_id": 132, "problem": "def tup_string(tup1):\n    \"\"\" Write a function to convert a tuple to a string.\n    \"\"\"\n", "contract": "", "function_name": "tup_string", "function_signature": "def tup_string(tup1):\n", "canonical_solution": "\n    str =    ''.join(tup1)\n    return str\n", "tests": ["test_out = tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\nassert test_out==(\"exercises\"), f'outputs {test_out}'", "test_out = tup_string(('p','y','t','h','o','n'))\nassert test_out==(\"python\"), f'outputs {test_out}'", "test_out = tup_string(('p','r','o','g','r','a','m'))\nassert test_out==(\"program\"), f'outputs {test_out}'"], "atol": ""}
{"task_id": 133, "problem": "def sum_negativenum(nums):\n    \"\"\" Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n", "contract": "", "function_name": "sum_negativenum", "function_signature": "def sum_negativenum(nums):\n", "canonical_solution": "\n    sum_negativenum = list(filter(lambda nums:nums<0,nums))\n    return sum(sum_negativenum)\n", "tests": ["test_out = sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\nassert test_out==-32, f'outputs {test_out}'", "test_out = sum_negativenum([10,15,-14,13,-18,12,-20])\nassert test_out==-52, f'outputs {test_out}'", "test_out = sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])\nassert test_out==-894, f'outputs {test_out}'"], "atol": ""}
{"task_id": 135, "problem": "def hexagonal_num(n):\n    \"\"\" Write a function to find the nth hexagonal number.\n    \"\"\"\n", "contract": "", "function_name": "hexagonal_num", "function_signature": "def hexagonal_num(n):\n", "canonical_solution": "\n    return n*(2*n - 1)\n", "tests": ["test_out = hexagonal_num(10)\nassert test_out == 190, f'outputs {test_out}'", "test_out = hexagonal_num(5)\nassert test_out == 45, f'outputs {test_out}'", "test_out = hexagonal_num(7)\nassert test_out == 91, f'outputs {test_out}'"], "atol": ""}
{"task_id": 137, "problem": "def zero_count(nums):\n    \"\"\" Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n", "contract": "", "function_name": "zero_count", "function_signature": "def zero_count(nums):\n", "canonical_solution": "    from array import array\n\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n             n1 += 1\n        else:\n           None\n    return n1/(n-n1)\n", "tests": ["import math\ntest_out = zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\nassert math.isclose(test_out, 0.181818, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\nassert math.isclose(test_out, 0.00, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\nassert math.isclose(test_out, 0.00, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 138, "problem": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\" Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n", "contract": "", "function_name": "is_Sum_Of_Powers_Of_Two", "function_signature": "def is_Sum_Of_Powers_Of_Two(n):\n", "canonical_solution": "\n    if (n % 2 == 1): \n        return False\n    else: \n        return True\n", "tests": ["test_out = is_Sum_Of_Powers_Of_Two(10)\nassert test_out == True, f'outputs {test_out}'", "test_out = is_Sum_Of_Powers_Of_Two(7)\nassert test_out == False, f'outputs {test_out}'", "test_out = is_Sum_Of_Powers_Of_Two(14)\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 139, "problem": "def circle_circumference(r):\n    \"\"\" Write a function to find the circumference of a circle.\n    \"\"\"\n", "contract": "", "function_name": "circle_circumference", "function_signature": "def circle_circumference(r):\n", "canonical_solution": "\n    perimeter=2*3.1415*r\n    return perimeter\n", "tests": ["import math\ntest_out = circle_circumference(10)\nassert math.isclose(test_out, 62.830000000000005, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = circle_circumference(5)\nassert math.isclose(test_out, 31.415000000000003, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = circle_circumference(4)\nassert math.isclose(test_out, 25.132, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 140, "problem": "def extract_singly(test_list):\n    \"\"\" Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n", "contract": "", "function_name": "extract_singly", "function_signature": "def extract_singly(test_list):\n", "canonical_solution": "\n    res = []\n    temp = set()\n    for inner in test_list:\n        for ele in inner:\n            if not ele in temp:\n                temp.add(ele)\n                res.append(ele)\n    return (res)\n", "tests": ["test_out = extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\nassert set(test_out) == set([3, 4, 5, 7, 1]), f'outputs {test_out}'", "test_out = extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])\nassert set(test_out) == set([1, 2, 3, 4, 7, 8]), f'outputs {test_out}'", "test_out = extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])\nassert set(test_out) == set([7, 8, 9, 10, 11, 12]), f'outputs {test_out}'"], "atol": ""}
{"task_id": 141, "problem": "def pancake_sort(nums):\n    \"\"\" Write a function to sort a list of elements.\n    \"\"\"\n", "contract": "", "function_name": "pancake_sort", "function_signature": "def pancake_sort(nums):\n", "canonical_solution": "\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n", "tests": ["test_out = pancake_sort([15, 79, 25, 38, 69])\nassert test_out == [15, 25, 38, 69, 79], f'outputs {test_out}'", "test_out = pancake_sort([98, 12, 54, 36, 85])\nassert test_out == [12, 36, 54, 85, 98], f'outputs {test_out}'", "test_out = pancake_sort([41, 42, 32, 12, 23])\nassert test_out == [12, 23, 32, 41, 42], f'outputs {test_out}'"], "atol": ""}
{"task_id": 142, "problem": "def count_samepair(list1,list2,list3):\n    \"\"\" Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n", "contract": "", "function_name": "count_samepair", "function_signature": "def count_samepair(list1,list2,list3):\n", "canonical_solution": "\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result\n", "tests": ["test_out = count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\nassert test_out==3, f'outputs {test_out}'", "test_out = count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])\nassert test_out==4, f'outputs {test_out}'", "test_out = count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])\nassert test_out==5, f'outputs {test_out}'"], "atol": ""}
{"task_id": 143, "problem": "def find_lists(Input):\n    \"\"\" Write a function to find number of lists present in the given tuple.\n    \"\"\"\n", "contract": "", "function_name": "find_lists", "function_signature": "def find_lists(Input):\n", "canonical_solution": "\n    if isinstance(Input, list): \n        return 1\n    else: \n        return len(Input)\n", "tests": ["test_out = find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))\nassert test_out == 2, f'outputs {test_out}'", "test_out = find_lists(([1, 2], [3, 4], [5, 6]))\nassert test_out  == 3, f'outputs {test_out}'", "test_out = find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1]))\nassert test_out == 1, f'outputs {test_out}'"], "atol": ""}
{"task_id": 145, "problem": "def max_Abs_Diff(arr):\n    \"\"\" Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n", "contract": "", "function_name": "max_Abs_Diff", "function_signature": "def max_Abs_Diff(arr):\n", "canonical_solution": "\n    n = len(arr)\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle)\n", "tests": ["test_out = max_Abs_Diff((2,1,5,3))\nassert test_out == 4, f'outputs {test_out}'", "test_out = max_Abs_Diff((9,3,2,5,1))\nassert test_out == 8, f'outputs {test_out}'", "test_out = max_Abs_Diff((3,2,1))\nassert test_out == 2, f'outputs {test_out}'"], "atol": ""}
{"task_id": 160, "problem": "def find_solution(a, b, n):\n    \"\"\" Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n", "contract": "", "function_name": "find_solution", "function_signature": "def find_solution(a, b, n):\n", "canonical_solution": "\n    i = 0\n    while i * a <= n:\n        if (n - (i * a)) % b == 0: \n             return (i, (n - (i * a)) // b)\n        i = i + 1\n    return None\n", "tests": ["test_out = find_solution(2, 3, 7)\nassert test_out == (2, 1), f'outputs {test_out}'", "test_out = find_solution(4, 2, 7)\nassert test_out == None, f'outputs {test_out}'", "test_out = find_solution(1, 13, 17)\nassert test_out == (4, 1), f'outputs {test_out}'"], "atol": ""}
{"task_id": 161, "problem": "def remove_elements(list1, list2):\n    \"\"\" Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n", "contract": "", "function_name": "remove_elements", "function_signature": "def remove_elements(list1, list2):\n", "canonical_solution": "\n    result = [x for x in list1 if x not in list2]\n    return result\n", "tests": ["test_out = remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\nassert test_out == [1, 3, 5, 7, 9, 10], f'outputs {test_out}'", "test_out = remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])\nassert test_out == [2, 4, 6, 8, 9, 10], f'outputs {test_out}'", "test_out = remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])\nassert test_out == [1, 2, 3, 4, 6, 8, 9, 10], f'outputs {test_out}'"], "atol": ""}
{"task_id": 162, "problem": "def sum_series(n):\n    \"\"\" Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n", "contract": "", "function_name": "sum_series", "function_signature": "def sum_series(n):\n", "canonical_solution": "\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n", "tests": ["test_out = sum_series(6)\nassert test_out == 12, f'outputs {test_out}'", "test_out = sum_series(10)\nassert test_out == 30, f'outputs {test_out}'", "test_out = sum_series(9)\nassert test_out == 25, f'outputs {test_out}'"], "atol": ""}
{"task_id": 163, "problem": "def area_polygon(s, l):\n    \"\"\" Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    \"\"\"\n", "contract": "", "function_name": "area_polygon", "function_signature": "def area_polygon(s, l):\n", "canonical_solution": "    from math import tan, pi\n\n    area = s * (l ** 2) / (4 * tan(pi / s))\n    return area\n", "tests": ["import math\ntest_out = area_polygon(4, 20)\nassert math.isclose(test_out, 400., rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = area_polygon(10, 15)\nassert math.isclose(test_out, 1731.197, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = area_polygon(9, 7)\nassert math.isclose(test_out, 302.909, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 164, "problem": "def are_equivalent(num1, num2):\n    \"\"\" Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n", "contract": "", "function_name": "are_equivalent", "function_signature": "def are_equivalent(num1, num2):\n", "canonical_solution": "    import math\n    def div_sum(n):\n      total = 1\n      i = 2\n    \n      while i * i <= n:\n        if (n % i == 0):\n          total = (total + i + math.floor(n / i))\n        i += 1\n    \n      return total\n    \n\n    return div_sum(num1) == div_sum(num2)\n", "tests": ["test_out = are_equivalent(36, 57)\nassert test_out == False, f'outputs {test_out}'", "test_out = are_equivalent(2, 4)\nassert test_out == False, f'outputs {test_out}'", "test_out = are_equivalent(23, 47)\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 165, "problem": "def count_char_position(str1):\n    \"\"\" Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n", "contract": "", "function_name": "count_char_position", "function_signature": "def count_char_position(str1):\n", "canonical_solution": "\n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n             (i == ord(str1[i]) - ord('a'))): \n             count_chars += 1\n    return count_chars\n", "tests": ["test_out = count_char_position(\"xbcefg\")\nassert test_out == 2, f'outputs {test_out}'", "test_out = count_char_position(\"ABcED\")\nassert test_out == 3, f'outputs {test_out}'", "test_out = count_char_position(\"AbgdeF\")\nassert test_out == 5, f'outputs {test_out}'"], "atol": ""}
{"task_id": 166, "problem": "def find_even_pair(A):\n    \"\"\" Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n", "contract": "", "function_name": "find_even_pair", "function_signature": "def find_even_pair(A):\n", "canonical_solution": "\n    count = 0\n    for i in range(0, len(A)): \n        for j in range(i+1, len(A)): \n                if ((A[i] ^ A[j]) % 2 == 0): \n                    count += 1\n\n    return count\n", "tests": ["test_out = find_even_pair([5, 4, 7, 2, 1])\nassert test_out == 4, f'outputs {test_out}'", "test_out = find_even_pair([7, 2, 8, 1, 0, 5, 11])\nassert test_out == 9, f'outputs {test_out}'", "test_out = find_even_pair([1, 2, 3])\nassert test_out == 1, f'outputs {test_out}'"], "atol": ""}
{"task_id": 167, "problem": "def next_power_of_2(n):\n    \"\"\" Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n", "contract": "", "function_name": "next_power_of_2", "function_signature": "def next_power_of_2(n):\n", "canonical_solution": "\n    if n and not n & (n - 1):\n        return n\n\n    count = 0\n    while n != 0: \n        n >>= 1\n        count += 1\n\n    return 1 << count\n", "tests": ["test_out = next_power_of_2(0)\nassert test_out == 1, f'outputs {test_out}'", "test_out = next_power_of_2(5)\nassert test_out == 8, f'outputs {test_out}'", "test_out = next_power_of_2(17)\nassert test_out == 32, f'outputs {test_out}'"], "atol": ""}
{"task_id": 168, "problem": "def frequency(a,x):\n    \"\"\" Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n", "contract": "", "function_name": "frequency", "function_signature": "def frequency(a,x):\n", "canonical_solution": "\n    count = 0  \n    for i in a: \n       if i == x: \n        count += 1\n\n    return count\n", "tests": ["test_out = frequency([1,2,3], 4)\nassert test_out == 0, f'outputs {test_out}'", "test_out = frequency([1,2,2,3,3,3,4], 3)\nassert test_out == 3, f'outputs {test_out}'", "test_out = frequency([0,1,2,3,1,2], 1)\nassert test_out == 2, f'outputs {test_out}'"], "atol": ""}
{"task_id": 170, "problem": "def sum_range_list(list1, m, n):\n    \"\"\" Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n", "contract": "", "function_name": "sum_range_list", "function_signature": "def sum_range_list(list1, m, n):\n", "canonical_solution": "\n    sum_range = 0                                                                                                                                                                                                                       \n    for i in range(m, n+1, 1):                                                                                                                                                                                                    \n        sum_range += list1[i]                                                                                                                                                                                                               \n    return sum_range\n", "tests": ["test_out = sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10)\nassert test_out == 29, f'outputs {test_out}'", "test_out = sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7)\nassert test_out == 16, f'outputs {test_out}'", "test_out = sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10)\nassert test_out == 38, f'outputs {test_out}'"], "atol": ""}
{"task_id": 171, "problem": "def perimeter_pentagon(a):\n    \"\"\" Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n", "contract": "", "function_name": "perimeter_pentagon", "function_signature": "def perimeter_pentagon(a):\n", "canonical_solution": "    import math\n\n    perimeter=(5*a)\n    return perimeter\n", "tests": ["test_out = perimeter_pentagon(5)\nassert test_out == 25, f'outputs {test_out}'", "test_out = perimeter_pentagon(10)\nassert test_out == 50, f'outputs {test_out}'", "test_out = perimeter_pentagon(15)\nassert test_out == 75, f'outputs {test_out}'"], "atol": ""}
{"task_id": 172, "problem": "def count_occurance(s):\n    \"\"\" Write a function to count the number of occurence of the string 'std' in a given string.\n    \"\"\"\n", "contract": "", "function_name": "count_occurance", "function_signature": "def count_occurance(s):\n", "canonical_solution": "\n    count = 0\n    for i in range(len(s) - 2):\n        if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):\n            count = count + 1\n    return count\n", "tests": ["test_out = count_occurance(\"letstdlenstdporstd\")\nassert test_out == 3, f'outputs {test_out}'", "test_out = count_occurance(\"truststdsolensporsd\")\nassert test_out == 1, f'outputs {test_out}'", "test_out = count_occurance(\"makestdsostdworthit\")\nassert test_out == 2, f'outputs {test_out}'", "test_out = count_occurance(\"stds\")\nassert test_out == 1, f'outputs {test_out}'", "test_out = count_occurance(\"\")\nassert test_out == 0, f'outputs {test_out}'"], "atol": ""}
{"task_id": 222, "problem": "def check_type(test_tuple):\n    \"\"\" Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n", "contract": "", "function_name": "check_type", "function_signature": "def check_type(test_tuple):\n", "canonical_solution": "\n    res = True\n    for ele in test_tuple:\n        if not isinstance(ele, type(test_tuple[0])):\n            res = False\n            break\n    return (res)\n", "tests": ["test_out = check_type((5, 6, 7, 3, 5, 6) )\nassert test_out == True, f'outputs {test_out}'", "test_out = check_type((1, 2, \"4\") )\nassert test_out == False, f'outputs {test_out}'", "test_out = check_type((3, 2, 1, 4, 5) )\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 223, "problem": "def is_majority(arr, n, x):\n    \"\"\" Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n", "contract": "", "function_name": "is_majority", "function_signature": "def is_majority(arr, n, x):\n\n", "canonical_solution": "    def binary_search(arr, low, high, x):\n        if high >= low:\n            mid = (low + high)//2\n            if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n                return mid\n            elif x > arr[mid]:\n                return binary_search(arr, (mid + 1), high, x)\n            else:\n                return binary_search(arr, low, (mid -1), x)\n        return -1\n\n    i = binary_search(arr, 0, n-1, x)\n    if i == -1:\n            return False\n    if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n            return True\n    else:\n            return False\n", "tests": ["test_out = is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)\nassert test_out == True, f'outputs {test_out}'", "test_out = is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\nassert test_out == False, f'outputs {test_out}'", "test_out = is_majority([1, 1, 1, 2, 2], 5, 1)\nassert test_out == True, f'outputs {test_out}'", "test_out = is_majority([1, 1, 2, 2], 5, 1)\nassert test_out == False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 224, "problem": "def count_Set_Bits(n):\n    \"\"\" Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n", "contract": "", "function_name": "count_Set_Bits", "function_signature": "def count_Set_Bits(n):\n", "canonical_solution": "\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n", "tests": ["test_out = count_Set_Bits(2)\nassert test_out == 1, f'outputs {test_out}'", "test_out = count_Set_Bits(4)\nassert test_out == 1, f'outputs {test_out}'", "test_out = count_Set_Bits(6)\nassert test_out == 2, f'outputs {test_out}'"], "atol": ""}
{"task_id": 226, "problem": "def odd_values_string(str):\n    \"\"\" Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n", "contract": "", "function_name": "odd_values_string", "function_signature": "def odd_values_string(str):\n", "canonical_solution": "\n    result = \"\" \n    for i in range(len(str)):\n        if i % 2 == 0:\n            result = result + str[i]\n    return result\n", "tests": ["test_out = odd_values_string('abcdef')\nassert test_out == 'ace', f'outputs {test_out}'", "test_out = odd_values_string('python')\nassert test_out == 'pto', f'outputs {test_out}'", "test_out = odd_values_string('data')\nassert test_out == 'dt', f'outputs {test_out}'", "test_out = odd_values_string('lambs')\nassert test_out == 'lms', f'outputs {test_out}'"], "atol": ""}
{"task_id": 227, "problem": "def min_of_three(a,b,c):\n    \"\"\" Write a function to find minimum of three numbers.\n    \"\"\"\n", "contract": "", "function_name": "min_of_three", "function_signature": "def min_of_three(a,b,c):\n", "canonical_solution": "\n    if (a <= b) and (a <= c): \n      smallest = a \n    elif (b <= a) and (b <= c): \n      smallest = b \n    else: \n      smallest = c \n    return smallest\n", "tests": ["test_out = min_of_three(10,20,0)\nassert test_out==0, f'outputs {test_out}'", "test_out = min_of_three(19,15,18)\nassert test_out==15, f'outputs {test_out}'", "test_out = min_of_three(-10,-20,-30)\nassert test_out==-30, f'outputs {test_out}'"], "atol": ""}
{"task_id": 228, "problem": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\" Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n", "contract": "", "function_name": "all_Bits_Set_In_The_Given_Range", "function_signature": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n", "canonical_solution": "\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False\n", "tests": ["test_out = all_Bits_Set_In_The_Given_Range(4,1,2)\nassert test_out == True, f'outputs {test_out}'", "test_out = all_Bits_Set_In_The_Given_Range(17,2,4)\nassert test_out == True, f'outputs {test_out}'", "test_out = all_Bits_Set_In_The_Given_Range(39,4,6)\nassert test_out == False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 229, "problem": "def re_arrange_array(arr, n):\n    \"\"\" Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n", "contract": "", "function_name": "re_arrange_array", "function_signature": "def re_arrange_array(arr, n):\n", "canonical_solution": "\n    j=0\n    for i in range(0, n):\n        if (arr[i] < 0):\n            temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n            j = j + 1\n    return arr\n", "tests": ["test_out = re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\nassert test_out == [-1, -3, -7, 4, 5, 6, 2, 8, 9], f'outputs {test_out}'", "test_out = re_arrange_array([12, -14, -26, 13, 15], 5)\nassert test_out == [-14, -26, 12, 13, 15], f'outputs {test_out}'", "test_out = re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)\nassert test_out == [-42, -39, -78, 10, 24, 36, 85], f'outputs {test_out}'"], "atol": ""}
{"task_id": 230, "problem": "def replace_blank(str1,char):\n    \"\"\" Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n", "contract": "", "function_name": "replace_blank", "function_signature": "def replace_blank(str1,char):\n", "canonical_solution": "    str2 = str1.replace(' ', char)\n    return str2", "tests": ["test_out = replace_blank(\"hello people\",'@')\nassert test_out==(\"hello@people\"), f'outputs {test_out}'", "test_out = replace_blank(\"python program language\",'$')\nassert test_out==(\"python$program$language\"), f'outputs {test_out}'", "test_out = replace_blank(\"blank space\",\"-\")\nassert test_out==(\"blank-space\"), f'outputs {test_out}'"], "atol": ""}
{"task_id": 232, "problem": "def larg_nnum(list1,n):\n    \"\"\" Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n", "contract": "", "function_name": "larg_nnum", "function_signature": "def larg_nnum(list1,n):\n", "canonical_solution": "    import heapq\n\n    largest=heapq.nlargest(n,list1)\n    return    largest\n", "tests": ["test_out = larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)\nassert set(test_out)==set([100,90]), f'outputs {test_out}'", "test_out = larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)\nassert set(test_out)==set([100,90,80,70,60]), f'outputs {test_out}'", "test_out = larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)\nassert set(test_out)==set([100,90,80]), f'outputs {test_out}'"], "atol": ""}
{"task_id": 233, "problem": "def lateralsuface_cylinder(r,h):\n    \"\"\" Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n", "contract": "", "function_name": "lateralsuface_cylinder", "function_signature": "def lateralsuface_cylinder(r,h):\n", "canonical_solution": "\n    lateralsurface= 2*3.1415*r*h\n    return lateralsurface\n", "tests": ["import math\ntest_out = lateralsuface_cylinder(10,5)\nassert math.isclose(test_out, 314.15000000000003, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = lateralsuface_cylinder(4,5)\nassert math.isclose(test_out, 125.66000000000001, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = lateralsuface_cylinder(4,10)\nassert math.isclose(test_out, 251.32000000000002, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 234, "problem": "def volume_cube(l):\n    \"\"\" Write a function to find the volume of a cube given its side length.\n    \"\"\"\n", "contract": "", "function_name": "volume_cube", "function_signature": "def volume_cube(l):\n", "canonical_solution": "\n    volume = l * l * l\n    return volume\n", "tests": ["test_out = volume_cube(3)\nassert test_out==27, f'outputs {test_out}'", "test_out = volume_cube(2)\nassert test_out==8, f'outputs {test_out}'", "test_out = volume_cube(5)\nassert test_out==125, f'outputs {test_out}'"], "atol": ""}
{"task_id": 235, "problem": "def even_bit_set_number(n):\n    \"\"\" Write a python function to set all even bits of a given number.\n    \"\"\"\n", "contract": "", "function_name": "even_bit_set_number", "function_signature": "def even_bit_set_number(n):\n", "canonical_solution": "\n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n             res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res)\n", "tests": ["test_out = even_bit_set_number(10)\nassert test_out == 10, f'outputs {test_out}'", "test_out = even_bit_set_number(20)\nassert test_out == 30, f'outputs {test_out}'", "test_out = even_bit_set_number(30)\nassert test_out == 30, f'outputs {test_out}'"], "atol": ""}
{"task_id": 237, "problem": "def check_occurences(test_list):\n    \"\"\" Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n", "contract": "", "function_name": "check_occurences", "function_signature": "def check_occurences(test_list):\n", "canonical_solution": "    from collections import Counter\n\n    res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n    return    (res)\n", "tests": ["test_out = check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] )\nassert test_out == {(1, 3): 2, (2, 5): 2, (3, 6): 1}, f'outputs {test_out}'", "test_out = check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] )\nassert test_out == {(2, 4): 2, (3, 6): 2, (4, 7): 1}, f'outputs {test_out}'", "test_out = check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] )\nassert test_out == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}, f'outputs {test_out}'"], "atol": ""}
{"task_id": 238, "problem": "def number_of_substrings(str):\n    \"\"\" Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n", "contract": "", "function_name": "number_of_substrings", "function_signature": "def number_of_substrings(str):\n", "canonical_solution": "\n    str_len = len(str); \n    return int(str_len * (str_len + 1) / 2)\n", "tests": ["test_out = number_of_substrings(\"abc\")\nassert test_out == 6, f'outputs {test_out}'", "test_out = number_of_substrings(\"abcd\")\nassert test_out == 10, f'outputs {test_out}'", "test_out = number_of_substrings(\"abcde\")\nassert test_out == 15, f'outputs {test_out}'"], "atol": ""}
{"task_id": 239, "problem": "def get_total_number_of_sequences(m,n):\n    \"\"\" Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n", "contract": "", "function_name": "get_total_number_of_sequences", "function_signature": "def get_total_number_of_sequences(m,n):\n", "canonical_solution": "\n    T=[[0 for i in range(n+1)] for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n             if i==0 or j==0: \n                 T[i][j]=0\n             elif i<j: \n                 T[i][j]=0\n             elif j==1: \n                 T[i][j]=i \n             else: \n                 T[i][j]=T[i-1][j]+T[i//2][j-1] \n    return T[m][n]\n", "tests": ["test_out = get_total_number_of_sequences(10, 4)\nassert test_out == 4, f'outputs {test_out}'", "test_out = get_total_number_of_sequences(5, 2)\nassert test_out == 6, f'outputs {test_out}'", "test_out = get_total_number_of_sequences(16, 3)\nassert test_out == 84, f'outputs {test_out}'"], "atol": ""}
{"task_id": 240, "problem": "def replace_list(list1,list2):\n    \"\"\" Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n", "contract": "", "function_name": "replace_list", "function_signature": "def replace_list(list1,list2):\n", "canonical_solution": "\n    list1[-1:]    =    list2\n    replace_list=list1\n    return    replace_list\n", "tests": ["test_out = replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\nassert test_out==[1, 3, 5, 7, 9, 2, 4, 6, 8], f'outputs {test_out}'", "test_out = replace_list([1,2,3,4,5],[5,6,7,8])\nassert test_out==[1,2,3,4,5,6,7,8], f'outputs {test_out}'", "test_out = replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])\nassert test_out==[\"red\",\"blue\",\"yellow\"], f'outputs {test_out}'"], "atol": ""}
{"task_id": 242, "problem": "def count_charac(str1):\n    \"\"\" Write a function to count the total number of characters in a string.\n    \"\"\"\n", "contract": "", "function_name": "count_charac", "function_signature": "def count_charac(str1):\n", "canonical_solution": "\n    total    =    0\n    for    i    in    str1:\n                total    =    total    +    1\n    return    total\n", "tests": ["test_out = count_charac(\"python programming\")\nassert test_out==18, f'outputs {test_out}'", "test_out = count_charac(\"language\")\nassert test_out==8, f'outputs {test_out}'", "test_out = count_charac(\"words\")\nassert test_out==5, f'outputs {test_out}'"], "atol": ""}
{"task_id": 244, "problem": "def next_Perfect_Square(N):\n    \"\"\" Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n", "contract": "", "function_name": "next_Perfect_Square", "function_signature": "def next_Perfect_Square(N):\n", "canonical_solution": "    import math\n\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN\n", "tests": ["test_out = next_Perfect_Square(35)\nassert test_out == 36, f'outputs {test_out}'", "test_out = next_Perfect_Square(6)\nassert test_out == 9, f'outputs {test_out}'", "test_out = next_Perfect_Square(9)\nassert test_out == 16, f'outputs {test_out}'"], "atol": ""}
{"task_id": 245, "problem": "def max_sum(arr):\n    \"\"\" Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n", "contract": "", "function_name": "max_sum", "function_signature": "def max_sum(arr):\n", "canonical_solution": "\n    MSIBS = arr[:] \n    for i in range(len(arr)): \n        for j in range(0, i): \n             if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n                 MSIBS[i] = MSIBS[j] + arr[i] \n    MSDBS = arr[:] \n    for i in range(1, len(arr) + 1): \n        for j in range(1, i): \n             if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n                 MSDBS[-i] = MSDBS[-j] + arr[-i] \n    max_sum = float(\"-Inf\") \n    for i, j, k in zip(MSIBS, MSDBS, arr): \n        max_sum = max(max_sum, i + j - k) \n    return max_sum\n", "tests": ["test_out = max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])\nassert test_out == 194, f'outputs {test_out}'", "test_out = max_sum([80, 60, 30, 40, 20, 10])\nassert test_out == 210, f'outputs {test_out}'", "test_out = max_sum([2, 3 ,14, 16, 21, 23, 29, 30])\nassert test_out == 138, f'outputs {test_out}'"], "atol": ""}
{"task_id": 246, "problem": "def babylonian_squareroot(number):\n    \"\"\" Write a function for computing square roots using the babylonian method.\n    \"\"\"\n", "contract": "", "function_name": "babylonian_squareroot", "function_signature": "def babylonian_squareroot(number):\n", "canonical_solution": "\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g\n", "tests": ["import math\ntest_out = babylonian_squareroot(10)\nassert math.isclose(test_out, 3.162277660168379, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = babylonian_squareroot(2)\nassert math.isclose(test_out, 1.414213562373095, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = babylonian_squareroot(9)\nassert math.isclose(test_out, 3.0, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 247, "problem": "def lps(str):\n    \"\"\" Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n", "contract": "", "function_name": "lps", "function_signature": "def lps(str):\n", "canonical_solution": "\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n             j = i+cl-1\n             if str[i] == str[j] and cl == 2: \n                 L[i][j] = 2\n             elif str[i] == str[j]: \n                 L[i][j] = L[i+1][j-1] + 2\n             else: \n                 L[i][j] = max(L[i][j-1], L[i+1][j]); \n    return L[0][n-1]\n", "tests": ["test_out = lps(\"TENS FOR TENS\")\nassert test_out == 5, f'outputs {test_out}'", "test_out = lps(\"CARDIO FOR CARDS\")\nassert test_out == 7, f'outputs {test_out}'", "test_out = lps(\"PART OF THE JOURNEY IS PART\")\nassert test_out == 9, f'outputs {test_out}'"], "atol": ""}
{"task_id": 248, "problem": "def harmonic_sum(n):\n    \"\"\" Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n", "contract": "", "function_name": "harmonic_sum", "function_signature": "def harmonic_sum(n):\n", "canonical_solution": "\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n", "tests": ["import math\ntest_out = harmonic_sum(7)\nassert math.isclose(test_out, 2.5928571428571425, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = harmonic_sum(4)\nassert math.isclose(test_out, 2.083333333333333, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = harmonic_sum(19)\nassert math.isclose(test_out, 3.547739657143682, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 249, "problem": "def intersection_array(array_nums1,array_nums2):\n    \"\"\" Write a function to find the intersection of two arrays.\n    \"\"\"\n", "contract": "", "function_name": "intersection_array", "function_signature": "def intersection_array(array_nums1,array_nums2):\n", "canonical_solution": "\n    result    =    list(filter(lambda    x:    x    in    array_nums1,    array_nums2))    \n    return    result\n", "tests": ["test_out = intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])\nassert test_out==[1, 2, 8, 9], f'outputs {test_out}'", "test_out = intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])\nassert test_out==[3,5,7,9], f'outputs {test_out}'", "test_out = intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])\nassert test_out==[10], f'outputs {test_out}'"], "atol": ""}
{"task_id": 250, "problem": "def count_X(tup, x):\n    \"\"\" Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n", "contract": "", "function_name": "count_X", "function_signature": "def count_X(tup, x):\n", "canonical_solution": "\n    count = 0\n    for ele in tup: \n        if (ele == x): \n             count = count + 1\n    return count\n", "tests": ["test_out = count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4)\nassert test_out == 0, f'outputs {test_out}'", "test_out = count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10)\nassert test_out == 3, f'outputs {test_out}'", "test_out = count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8)\nassert test_out == 4, f'outputs {test_out}'"], "atol": ""}
{"task_id": 251, "problem": "def insert_element(list,element):\n    \"\"\" Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n", "contract": "", "function_name": "insert_element", "function_signature": "def insert_element(list,element):\n", "canonical_solution": "\n    list    =    [v    for    elt    in    list    for    v    in    (element,    elt)]\n    return    list\n", "tests": ["test_out = insert_element(['Red', 'Green', 'Black'] ,'c')\nassert test_out==['c', 'Red', 'c', 'Green', 'c', 'Black'], f'outputs {test_out}'", "test_out = insert_element(['python', 'java'] ,'program')\nassert test_out==['program', 'python', 'program', 'java'], f'outputs {test_out}'", "test_out = insert_element(['happy', 'sad'] ,'laugh')\nassert test_out==['laugh', 'happy', 'laugh', 'sad'], f'outputs {test_out}'"], "atol": ""}
{"task_id": 252, "problem": "def convert(numbers):\n    \"\"\" Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n", "contract": "", "function_name": "convert", "function_signature": "def convert(numbers):\n", "canonical_solution": "    import cmath\n\n    num = cmath.polar(numbers)    \n    return (num)\n", "tests": ["test_out = convert(1)\nassert test_out == (1.0, 0.0), f'outputs {test_out}'", "test_out = convert(4)\nassert test_out == (4.0,0.0), f'outputs {test_out}'", "test_out = convert(5)\nassert test_out == (5.0,0.0), f'outputs {test_out}'"], "atol": ""}
{"task_id": 253, "problem": "def count_integer(list1):\n    \"\"\" Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n", "contract": "", "function_name": "count_integer", "function_signature": "def count_integer(list1):\n", "canonical_solution": "\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n             ctr = ctr + 1\n    return ctr\n", "tests": ["test_out = count_integer([1,2,'abc',1.2])\nassert test_out == 2, f'outputs {test_out}'", "test_out = count_integer([1,2,3])\nassert test_out == 3, f'outputs {test_out}'", "test_out = count_integer([1,1.2,4,5.1])\nassert test_out == 2, f'outputs {test_out}'"], "atol": ""}
{"task_id": 255, "problem": "def combinations_colors(l, n):\n    \"\"\" Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    \"\"\"\n", "contract": "", "function_name": "combinations_colors", "function_signature": "def combinations_colors(l, n):\n", "canonical_solution": "    from itertools import combinations_with_replacement\n\n    return list(combinations_with_replacement(l,n))\n", "tests": ["test_out = combinations_colors([\"Red\",\"Green\",\"Blue\"],1)\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)], f'outputs {test_out}'", "test_out = combinations_colors([\"Red\",\"Green\",\"Blue\"],2)\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')], f'outputs {test_out}'", "test_out = combinations_colors([\"Red\",\"Green\",\"Blue\"],3)\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')], f'outputs {test_out}'"], "atol": ""}
{"task_id": 256, "problem": "def count_Primes_nums(n):\n    \"\"\" Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n", "contract": "", "function_name": "count_Primes_nums", "function_signature": "def count_Primes_nums(n):\n", "canonical_solution": "\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n             continue\n        for i in range(2,num):\n             if (num % i) == 0:\n                 break\n        else:\n             ctr += 1\n    return ctr\n", "tests": ["test_out = count_Primes_nums(5)\nassert test_out == 2, f'outputs {test_out}'", "test_out = count_Primes_nums(10)\nassert test_out == 4, f'outputs {test_out}'", "test_out = count_Primes_nums(100)\nassert test_out == 25, f'outputs {test_out}'"], "atol": ""}
{"task_id": 257, "problem": "def swap_numbers(a,b):\n    \"\"\" Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n", "contract": "", "function_name": "swap_numbers", "function_signature": "def swap_numbers(a,b):\n", "canonical_solution": "\n    temp    =    a\n    a    =    b\n    b    =    temp\n    return    (a,b)\n", "tests": ["test_out = swap_numbers(10,20)\nassert test_out==(20,10), f'outputs {test_out}'", "test_out = swap_numbers(15,17)\nassert test_out==(17,15), f'outputs {test_out}'", "test_out = swap_numbers(100,200)\nassert test_out==(200,100), f'outputs {test_out}'"], "atol": ""}
{"task_id": 259, "problem": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\" Write a function to maximize the given two tuples.\n    \"\"\"\n", "contract": "", "function_name": "maximize_elements", "function_signature": "def maximize_elements(test_tup1, test_tup2):\n", "canonical_solution": "\n    res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n     for tup1, tup2 in zip(test_tup1, test_tup2))\n    return (res)\n", "tests": ["test_out = maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\nassert test_out == ((6, 7), (4, 9), (2, 9), (7, 10)), f'outputs {test_out}'", "test_out = maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\nassert test_out == ((7, 8), (5, 10), (3, 10), (8, 11)), f'outputs {test_out}'", "test_out = maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\nassert test_out == ((8, 9), (6, 11), (4, 11), (9, 12)), f'outputs {test_out}'"], "atol": ""}
{"task_id": 260, "problem": "def newman_prime(n):\n    \"\"\" Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n", "contract": "", "function_name": "newman_prime", "function_signature": "def newman_prime(n):\n", "canonical_solution": "\n    if n == 0 or n == 1: \n        return 1\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2)\n", "tests": ["test_out = newman_prime(3)\nassert test_out == 7, f'outputs {test_out}'", "test_out = newman_prime(4)\nassert test_out == 17, f'outputs {test_out}'", "test_out = newman_prime(5)\nassert test_out == 41, f'outputs {test_out}'"], "atol": ""}
{"task_id": 261, "problem": "def division_elements(test_tup1, test_tup2):\n    \"\"\" Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n", "contract": "", "function_name": "division_elements", "function_signature": "def division_elements(test_tup1, test_tup2):\n", "canonical_solution": "\n    res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res)\n", "tests": ["test_out = division_elements((10, 4, 6, 9),(5, 2, 3, 3))\nassert test_out == (2, 2, 2, 3), f'outputs {test_out}'", "test_out = division_elements((12, 6, 8, 16),(6, 3, 4, 4))\nassert test_out == (2, 2, 2, 4), f'outputs {test_out}'", "test_out = division_elements((20, 14, 36, 18),(5, 7, 6, 9))\nassert test_out == (4, 2, 6, 2), f'outputs {test_out}'"], "atol": ""}
{"task_id": 262, "problem": "def split_two_parts(list1, L):\n    \"\"\" Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n", "contract": "", "function_name": "split_two_parts", "function_signature": "def split_two_parts(list1, L):\n", "canonical_solution": "\n    return list1[:L], list1[L:]\n", "tests": ["test_out = split_two_parts([1,1,2,3,4,4,5,1],3)\nassert test_out==([1, 1, 2], [3, 4, 4, 5, 1]), f'outputs {test_out}'", "test_out = split_two_parts(['a', 'b', 'c', 'd'],2)\nassert test_out==(['a', 'b'], ['c', 'd']), f'outputs {test_out}'", "test_out = split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)\nassert test_out==(['p', 'y', 't', 'h'], ['o', 'n']), f'outputs {test_out}'"], "atol": ""}
{"task_id": 264, "problem": "def dog_age(h_age):\n    \"\"\" Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n", "contract": "", "function_name": "dog_age", "function_signature": "def dog_age(h_age):\n", "canonical_solution": "\n    if    h_age    <    0:\n                    exit()\n    elif    h_age    <=    2:\n                    d_age    =    h_age    *    10.5\n    else:\n                    d_age    =    21    +    (h_age    -    2)*4\n    return    d_age\n", "tests": ["test_out = dog_age(12)\nassert test_out==61, f'outputs {test_out}'", "test_out = dog_age(15)\nassert test_out==73, f'outputs {test_out}'", "test_out = dog_age(24)\nassert test_out==109, f'outputs {test_out}'"], "atol": ""}
{"task_id": 265, "problem": "def list_split(S, step):\n    \"\"\" Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n", "contract": "", "function_name": "list_split", "function_signature": "def list_split(S, step):\n", "canonical_solution": "\n    return [S[i::step] for i in range(step)]\n", "tests": ["test_out = list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)\nassert test_out==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']], f'outputs {test_out}'", "test_out = list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)\nassert test_out==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]], f'outputs {test_out}'", "test_out = list_split(['python','java','C','C++','DBMS','SQL'],2)\nassert test_out==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']], f'outputs {test_out}'"], "atol": ""}
{"task_id": 266, "problem": "def lateralsurface_cube(l):\n    \"\"\" Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n", "contract": "", "function_name": "lateralsurface_cube", "function_signature": "def lateralsurface_cube(l):\n", "canonical_solution": "\n    LSA = 4 * (l * l)\n    return LSA\n", "tests": ["test_out = lateralsurface_cube(5)\nassert test_out==100, f'outputs {test_out}'", "test_out = lateralsurface_cube(9)\nassert test_out==324, f'outputs {test_out}'", "test_out = lateralsurface_cube(10)\nassert test_out==400, f'outputs {test_out}'"], "atol": ""}
{"task_id": 267, "problem": "def square_Sum(n):\n    \"\"\" Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n", "contract": "", "function_name": "square_Sum", "function_signature": "def square_Sum(n):\n", "canonical_solution": "\n    return int(n*(4*n*n-1)/3)\n", "tests": ["test_out = square_Sum(2)\nassert test_out == 10, f'outputs {test_out}'", "test_out = square_Sum(3)\nassert test_out == 35, f'outputs {test_out}'", "test_out = square_Sum(4)\nassert test_out == 84, f'outputs {test_out}'"], "atol": ""}
{"task_id": 268, "problem": "def find_star_num(n):\n    \"\"\" Write a function to find the n'th star number.\n    \"\"\"\n", "contract": "", "function_name": "find_star_num", "function_signature": "def find_star_num(n):\n", "canonical_solution": "\n    return (6 * n * (n - 1) + 1)\n", "tests": ["test_out = find_star_num(3)\nassert test_out == 37, f'outputs {test_out}'", "test_out = find_star_num(4)\nassert test_out == 73, f'outputs {test_out}'", "test_out = find_star_num(5)\nassert test_out == 121, f'outputs {test_out}'"], "atol": ""}
{"task_id": 269, "problem": "def ascii_value(k):\n    \"\"\" Write a function to find the ascii value of a character.\n    \"\"\"\n", "contract": "", "function_name": "ascii_value", "function_signature": "def ascii_value(k):\n", "canonical_solution": "\n    ch=k\n    return ord(ch)\n", "tests": ["test_out = ascii_value('A')\nassert test_out==65, f'outputs {test_out}'", "test_out = ascii_value('R')\nassert test_out==82, f'outputs {test_out}'", "test_out = ascii_value('S')\nassert test_out==83, f'outputs {test_out}'"], "atol": ""}
{"task_id": 270, "problem": "def sum_even_and_even_index(arr):\n    \"\"\" Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n", "contract": "", "function_name": "sum_even_and_even_index", "function_signature": "def sum_even_and_even_index(arr):\n", "canonical_solution": "\n    i = 0\n    sum = 0\n    for i in range(0, len(arr),2): \n        if (arr[i] % 2 == 0) : \n             sum += arr[i]  \n    return sum\n", "tests": ["test_out = sum_even_and_even_index([5, 6, 12, 1, 18, 8])\nassert test_out == 30, f'outputs {test_out}'", "test_out = sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18])\nassert test_out == 26, f'outputs {test_out}'", "test_out = sum_even_and_even_index([5, 6, 12, 1])\nassert test_out == 12, f'outputs {test_out}'"], "atol": ""}
{"task_id": 271, "problem": "def even_Power_Sum(n):\n    \"\"\" Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n", "contract": "", "function_name": "even_Power_Sum", "function_signature": "def even_Power_Sum(n):\n", "canonical_solution": "\n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum\n", "tests": ["test_out = even_Power_Sum(2)\nassert test_out == 1056, f'outputs {test_out}'", "test_out = even_Power_Sum(3)\nassert test_out == 8832, f'outputs {test_out}'", "test_out = even_Power_Sum(1)\nassert test_out == 32, f'outputs {test_out}'"], "atol": ""}
{"task_id": 272, "problem": "def rear_extract(test_list):\n    \"\"\" Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n", "contract": "", "function_name": "rear_extract", "function_signature": "def rear_extract(test_list):\n", "canonical_solution": "\n    res = [lis[-1] for lis in test_list]\n    return (res)\n", "tests": ["test_out = rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\nassert test_out == [21, 20, 19], f'outputs {test_out}'", "test_out = rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)])\nassert test_out == [36, 25, 45], f'outputs {test_out}'", "test_out = rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)])\nassert test_out == [14, 36, 56], f'outputs {test_out}'"], "atol": ""}
{"task_id": 273, "problem": "def substract_elements(test_tup1, test_tup2):\n    \"\"\" Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n", "contract": "", "function_name": "substract_elements", "function_signature": "def substract_elements(test_tup1, test_tup2):\n", "canonical_solution": "\n    res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n    return (res)\n", "tests": ["test_out = substract_elements((10, 4, 5), (2, 5, 18))\nassert test_out == (8, -1, -13), f'outputs {test_out}'", "test_out = substract_elements((11, 2, 3), (24, 45 ,16))\nassert test_out == (-13, -43, -13), f'outputs {test_out}'", "test_out = substract_elements((7, 18, 9), (10, 11, 12))\nassert test_out == (-3, 7, -3), f'outputs {test_out}'"], "atol": ""}
{"task_id": 274, "problem": "def even_binomial_Coeff_Sum( n):\n    \"\"\" Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n", "contract": "", "function_name": "even_binomial_Coeff_Sum", "function_signature": "def even_binomial_Coeff_Sum( n):\n", "canonical_solution": "    import math\n\n    return (1 << (n - 1))\n", "tests": ["test_out = even_binomial_Coeff_Sum(4)\nassert test_out == 8, f'outputs {test_out}'", "test_out = even_binomial_Coeff_Sum(6)\nassert test_out == 32, f'outputs {test_out}'", "test_out = even_binomial_Coeff_Sum(2)\nassert test_out == 2, f'outputs {test_out}'"], "atol": ""}
{"task_id": 276, "problem": "def volume_cylinder(r,h):\n    \"\"\" Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n", "contract": "", "function_name": "volume_cylinder", "function_signature": "def volume_cylinder(r,h):\n", "canonical_solution": "\n    volume=3.1415*r*r*h\n    return volume\n", "tests": ["import math\ntest_out = volume_cylinder(10,5)\nassert math.isclose(test_out, 1570.7500000000002, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = volume_cylinder(4,5)\nassert math.isclose(test_out, 251.32000000000002, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = volume_cylinder(4,10)\nassert math.isclose(test_out, 502.64000000000004, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 277, "problem": "def dict_filter(dict,n):\n    \"\"\" Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n", "contract": "", "function_name": "dict_filter", "function_signature": "def dict_filter(dict,n):\n", "canonical_solution": "\n    result    =    {key:value    for    (key,    value)    in    dict.items()    if    value    >=n}\n    return    result\n", "tests": ["test_out = dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)\nassert test_out=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}, f'outputs {test_out}'", "test_out = dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)\nassert test_out=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}, f'outputs {test_out}'", "test_out = dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)\nassert test_out=={ 'Pierre Cox': 190}, f'outputs {test_out}'"], "atol": ""}
{"task_id": 278, "problem": "def count_first_elements(test_tup):\n    \"\"\" Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n", "contract": "", "function_name": "count_first_elements", "function_signature": "def count_first_elements(test_tup):\n", "canonical_solution": "\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, tuple):\n            break\n    return (count)\n", "tests": ["test_out = count_first_elements((1, 5, 7, (4, 6), 10) )\nassert test_out == 3, f'outputs {test_out}'", "test_out = count_first_elements((2, 9, (5, 7), 11) )\nassert test_out == 2, f'outputs {test_out}'", "test_out = count_first_elements((11, 15, 5, 8, (2, 3), 8) )\nassert test_out == 4, f'outputs {test_out}'"], "atol": ""}
{"task_id": 279, "problem": "def is_num_decagonal(n):\n    \"\"\" Write a function to find the nth decagonal number.\n    \"\"\"\n", "contract": "", "function_name": "is_num_decagonal", "function_signature": "def is_num_decagonal(n):\n", "canonical_solution": "\n    return 4 * n * n - 3 * n\n", "tests": ["test_out = is_num_decagonal(3)\nassert test_out == 27, f'outputs {test_out}'", "test_out = is_num_decagonal(7)\nassert test_out == 175, f'outputs {test_out}'", "test_out = is_num_decagonal(10)\nassert test_out == 370, f'outputs {test_out}'"], "atol": ""}
{"task_id": 280, "problem": "def sequential_search(dlist, item):\n    \"\"\" Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n", "contract": "", "function_name": "sequential_search", "function_signature": "def sequential_search(dlist, item):\n", "canonical_solution": "\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n             found = True\n        else:\n             pos = pos + 1\n    return found, pos\n", "tests": ["test_out = sequential_search([11,23,58,31,56,77,43,12,65,19],31)\nassert test_out == (True, 3), f'outputs {test_out}'", "test_out = sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61)\nassert test_out == (True, 7), f'outputs {test_out}'", "test_out = sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48)\nassert test_out == (True, 6), f'outputs {test_out}'"], "atol": ""}
{"task_id": 281, "problem": "def all_unique(test_list):\n    \"\"\" Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n", "contract": "", "function_name": "all_unique", "function_signature": "def all_unique(test_list):\n", "canonical_solution": "\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True\n", "tests": ["test_out = all_unique([1,2,3])\nassert test_out == True, f'outputs {test_out}'", "test_out = all_unique([1,2,1,2])\nassert test_out == False, f'outputs {test_out}'", "test_out = all_unique([1,2,3,4,5])\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 282, "problem": "def sub_list(nums1,nums2):\n    \"\"\" Write a function to subtract two lists element-wise.\n    \"\"\"\n", "contract": "", "function_name": "sub_list", "function_signature": "def sub_list(nums1,nums2):\n", "canonical_solution": "\n    result = map(lambda x, y: x - y, nums1, nums2)\n    return list(result)\n", "tests": ["test_out = sub_list([1, 2, 3],[4,5,6])\nassert test_out==[-3,-3,-3], f'outputs {test_out}'", "test_out = sub_list([1,2],[3,4])\nassert test_out==[-2,-2], f'outputs {test_out}'", "test_out = sub_list([90,120],[50,70])\nassert test_out==[40,50], f'outputs {test_out}'"], "atol": ""}
{"task_id": 283, "problem": "def validate(n):\n    \"\"\" Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n", "contract": "", "function_name": "validate", "function_signature": "def validate(n):\n", "canonical_solution": "\n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n             if (temp % 10 == i): \n                 count+=1;  \n             if (count > i): \n                 return False\n             temp //= 10; \n    return True\n", "tests": ["test_out = validate(1234)\nassert test_out == True, f'outputs {test_out}'", "test_out = validate(51241)\nassert test_out == False, f'outputs {test_out}'", "test_out = validate(321)\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 284, "problem": "def check_element(list,element):\n    \"\"\" Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n", "contract": "", "function_name": "check_element", "function_signature": "def check_element(list,element):\n", "canonical_solution": "\n    check_element=all(v== element for v in list)\n    return check_element\n", "tests": ["test_out = check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')\nassert test_out==False, f'outputs {test_out}'", "test_out = check_element([1,2,3,4],7)\nassert test_out==False, f'outputs {test_out}'", "test_out = check_element([\"green\", \"green\", \"green\", \"green\"],'green')\nassert test_out==True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 285, "problem": "def text_match_two_three(text):\n    \"\"\" Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n", "contract": "", "function_name": "text_match_two_three", "function_signature": "def text_match_two_three(text):\n", "canonical_solution": "    import re\n\n    patterns = 'ab{2,3}'\n    if re.search(patterns,  text):\n         return True\n    else:\n         return False\n", "tests": ["test_out = text_match_two_three(\"ac\")\nassert test_out==(False), f'outputs {test_out}'", "test_out = text_match_two_three(\"dc\")\nassert test_out==(False), f'outputs {test_out}'", "test_out = text_match_two_three(\"abbbba\")\nassert test_out==(True), f'outputs {test_out}'"], "atol": ""}
{"task_id": 286, "problem": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\" Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n", "contract": "", "function_name": "max_sub_array_sum_repeated", "function_signature": "def max_sub_array_sum_repeated(a, n, k):\n", "canonical_solution": "\n    max_so_far = -2147483648\n    max_ending_here = 0\n    for i in range(n*k): \n        max_ending_here = max_ending_here + a[i%n] \n        if (max_so_far < max_ending_here): \n             max_so_far = max_ending_here \n        if (max_ending_here < 0): \n             max_ending_here = 0\n    return max_so_far\n", "tests": ["test_out = max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\nassert test_out == 30, f'outputs {test_out}'", "test_out = max_sub_array_sum_repeated([-1, 10, 20], 3, 2)\nassert test_out == 59, f'outputs {test_out}'", "test_out = max_sub_array_sum_repeated([-1, -2, -3], 3, 3)\nassert test_out == -1, f'outputs {test_out}'"], "atol": ""}
{"task_id": 287, "problem": "def square_Sum(n):\n    \"\"\" Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n", "contract": "", "function_name": "square_Sum", "function_signature": "def square_Sum(n):\n", "canonical_solution": "\n    return int(2*n*(n+1)*(2*n+1)/3)\n", "tests": ["test_out = square_Sum(2)\nassert test_out == 20, f'outputs {test_out}'", "test_out = square_Sum(3)\nassert test_out == 56, f'outputs {test_out}'", "test_out = square_Sum(4)\nassert test_out == 120, f'outputs {test_out}'"], "atol": ""}
{"task_id": 290, "problem": "def max_length(list1):\n    \"\"\" Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n", "contract": "", "function_name": "max_length", "function_signature": "def max_length(list1):\n", "canonical_solution": "\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in    list1)\n    return(max_length, max_list)\n", "tests": ["test_out = max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\nassert test_out==(3, [13, 15, 17]), f'outputs {test_out}'", "test_out = max_length([[1], [5, 7], [10, 12, 14,15]])\nassert test_out==(4, [10, 12, 14,15]), f'outputs {test_out}'", "test_out = max_length([[5], [15,20,25]])\nassert test_out==(3, [15,20,25]), f'outputs {test_out}'"], "atol": ""}
{"task_id": 291, "problem": "def count_no_of_ways(n, k):\n    \"\"\" Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n", "contract": "", "function_name": "count_no_of_ways", "function_signature": "def count_no_of_ways(n, k):\n", "canonical_solution": "\n    dp = [0] * (n + 1) \n    total = k \n    mod = 1000000007\n    dp[1] = k \n    dp[2] = k * k     \n    for i in range(3,n+1): \n        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n    return dp[n]\n", "tests": ["test_out = count_no_of_ways(2, 4)\nassert test_out == 16, f'outputs {test_out}'", "test_out = count_no_of_ways(3, 2)\nassert test_out == 6, f'outputs {test_out}'", "test_out = count_no_of_ways(4, 4)\nassert test_out == 228, f'outputs {test_out}'"], "atol": ""}
{"task_id": 292, "problem": "def find(n,m):\n    \"\"\" Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n", "contract": "", "function_name": "find", "function_signature": "def find(n,m):\n", "canonical_solution": "\n    q = n//m \n    return (q)\n", "tests": ["test_out = find(10,3)\nassert test_out == 3, f'outputs {test_out}'", "test_out = find(4,2)\nassert test_out == 2, f'outputs {test_out}'", "test_out = find(20,5)\nassert test_out == 4, f'outputs {test_out}'"], "atol": ""}
{"task_id": 293, "problem": "def otherside_rightangle(w,h):\n    \"\"\" Write a function to find the third side of a right angled triangle.\n    \"\"\"\n", "contract": "", "function_name": "otherside_rightangle", "function_signature": "def otherside_rightangle(w,h):\n", "canonical_solution": "    import math\n\n    s=math.sqrt((w*w)+(h*h))\n    return s\n", "tests": ["test_out = otherside_rightangle(7,8)\nassert test_out==10.63014581273465, f'outputs {test_out}'", "test_out = otherside_rightangle(3,4)\nassert test_out==5, f'outputs {test_out}'", "test_out = otherside_rightangle(7,15)\nassert test_out==16.55294535724685, f'outputs {test_out}'"], "atol": ""}
{"task_id": 294, "problem": "def max_val(listval):\n    \"\"\" Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n", "contract": "", "function_name": "max_val", "function_signature": "def max_val(listval):\n", "canonical_solution": "\n    max_val = max(i for i in listval if isinstance(i, int)) \n    return(max_val)\n", "tests": ["test_out = max_val(['Python', 3, 2, 4, 5, 'version'])\nassert test_out==5, f'outputs {test_out}'", "test_out = max_val(['Python', 15, 20, 25])\nassert test_out==25, f'outputs {test_out}'", "test_out = max_val(['Python', 30, 20, 40, 50, 'version'])\nassert test_out==50, f'outputs {test_out}'"], "atol": ""}
{"task_id": 295, "problem": "def sum_div(number):\n    \"\"\" Write a function to return the sum of all divisors of a number.\n    \"\"\"\n", "contract": "", "function_name": "sum_div", "function_signature": "def sum_div(number):\n", "canonical_solution": "\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n             divisors.append(i)\n    return sum(divisors)\n", "tests": ["test_out = sum_div(8)\nassert test_out==7, f'outputs {test_out}'", "test_out = sum_div(12)\nassert test_out==16, f'outputs {test_out}'", "test_out = sum_div(7)\nassert test_out==1, f'outputs {test_out}'"], "atol": ""}
{"task_id": 296, "problem": "def get_Inv_Count(arr):\n    \"\"\" Write a python function to count inversions in an array.\n    \"\"\"\n", "contract": "", "function_name": "get_Inv_Count", "function_signature": "def get_Inv_Count(arr):\n", "canonical_solution": "\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n             if (arr[i] > arr[j]): \n                 inv_count += 1\n    return inv_count\n", "tests": ["test_out = get_Inv_Count([1,20,6,4,5])\nassert test_out == 5, f'outputs {test_out}'", "test_out = get_Inv_Count([1,2,1])\nassert test_out == 1, f'outputs {test_out}'", "test_out = get_Inv_Count([1,2,5,6,1])\nassert test_out == 3, f'outputs {test_out}'"], "atol": ""}
{"task_id": 297, "problem": "def flatten_list(list1):\n    \"\"\" Write a function to flatten a given nested list structure.\n    \"\"\"\n", "contract": "", "function_name": "flatten_list", "function_signature": "def flatten_list(list1):\n", "canonical_solution": "\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n             if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list\n", "tests": ["test_out = flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\nassert test_out==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120], f'outputs {test_out}'", "test_out = flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\nassert test_out==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40], f'outputs {test_out}'", "test_out = flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\nassert test_out==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9], f'outputs {test_out}'"], "atol": ""}
{"task_id": 299, "problem": "def max_aggregate(stdata):\n    \"\"\" Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n", "contract": "", "function_name": "max_aggregate", "function_signature": "def max_aggregate(stdata):\n", "canonical_solution": "    from collections import defaultdict\n\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n", "tests": ["test_out = max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])\nassert test_out==('Juan Whelan', 212), f'outputs {test_out}'", "test_out = max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])\nassert test_out==('Juan Whelan', 72), f'outputs {test_out}'", "test_out = max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])\nassert test_out==('Sabah Colley', 70), f'outputs {test_out}'"], "atol": ""}
{"task_id": 300, "problem": "def count_binary_seq(n):\n    \"\"\" Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n", "contract": "", "function_name": "count_binary_seq", "function_signature": "def count_binary_seq(n):\n", "canonical_solution": "\n    nCr = 1\n    res = 1\n    for r in range(1, n + 1): \n        nCr = (nCr * (n + 1 - r)) / r \n        res += nCr * nCr \n    return res\n", "tests": ["import math\ntest_out = count_binary_seq(1)\nassert math.isclose(test_out, 2.0, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = count_binary_seq(2)\nassert math.isclose(test_out, 6.0, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = count_binary_seq(3)\nassert math.isclose(test_out, 20.0, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 301, "problem": "def dict_depth(d):\n    \"\"\" Write a function to find the depth of a dictionary.\n    \"\"\"\n", "contract": "", "function_name": "dict_depth", "function_signature": "def dict_depth(d):\n", "canonical_solution": "\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n", "tests": ["test_out = dict_depth({'a':1, 'b': {'c': {'d': {}}}})\nassert test_out==4, f'outputs {test_out}'", "test_out = dict_depth({'a':1, 'b': {'c':'python'}})\nassert test_out==2, f'outputs {test_out}'", "test_out = dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})\nassert test_out==3, f'outputs {test_out}'"], "atol": ""}
{"task_id": 304, "problem": "def find_Element(arr,ranges,rotations,index) :\n    \"\"\" Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n", "contract": "", "function_name": "find_Element", "function_signature": "def find_Element(arr,ranges,rotations,index) :\n", "canonical_solution": "\n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n             if (index == left) : \n                 index = right \n             else : \n                 index = index - 1 \n    return arr[index]\n", "tests": ["test_out = find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1)\nassert test_out == 3, f'outputs {test_out}'", "test_out = find_Element([1,2,3,4],[[0,1],[0,2]],1,2)\nassert test_out == 3, f'outputs {test_out}'", "test_out = find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1)\nassert test_out == 1, f'outputs {test_out}'"], "atol": ""}
{"task_id": 305, "problem": "def start_withp(words):\n    \"\"\" Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n", "contract": "", "function_name": "start_withp", "function_signature": "def start_withp(words):\n", "canonical_solution": "    import re\n\n    for    w    in    words:\n                                m    =    re.match(\"(P\\w+)\\W(P\\w+)\",    w)\n                                if    m:\n                                                return    m.groups()\n", "tests": ["test_out = start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\nassert test_out==('Python', 'PHP'), f'outputs {test_out}'", "test_out = start_withp([\"Python Programming\",\"Java Programming\"])\nassert test_out==('Python','Programming'), f'outputs {test_out}'", "test_out = start_withp([\"Pqrst Pqr\",\"qrstuv\"])\nassert test_out==('Pqrst','Pqr'), f'outputs {test_out}'"], "atol": ""}
{"task_id": 306, "problem": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\" Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    \"\"\"\n", "contract": "", "function_name": "max_sum_increasing_subseq", "function_signature": "def max_sum_increasing_subseq(a, n, index, k):\n", "canonical_solution": "\n    dp = [[0 for i in range(n)] \n             for i in range(n)]\n    for i in range(n):\n        if a[i] > a[0]:\n             dp[0][i] = a[i] + a[0]\n        else:\n             dp[0][i] = a[i]\n    for i in range(1, n):\n        for j in range(n):\n             if a[j] > a[i] and j > i:\n                 if dp[i - 1][i] + a[j] > dp[i - 1][j]:\n                     dp[i][j] = dp[i - 1][i] + a[j]\n                 else:\n                     dp[i][j] = dp[i - 1][j]\n             else:\n                 dp[i][j] = dp[i - 1][j]\n    return dp[index][k]\n", "tests": ["test_out = max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)\nassert test_out == 11, f'outputs {test_out}'", "test_out = max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5)\nassert test_out == 7, f'outputs {test_out}'", "test_out = max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)\nassert test_out == 71, f'outputs {test_out}'"], "atol": ""}
{"task_id": 307, "problem": "def colon_tuplex(tuplex,m,n):\n    \"\"\" Write a function to get a colon of a tuple.\n    \"\"\"\n", "contract": "", "function_name": "colon_tuplex", "function_signature": "def colon_tuplex(tuplex,m,n):\n", "canonical_solution": "    from copy import deepcopy\n\n    tuplex_colon = deepcopy(tuplex)\n    tuplex_colon[m].append(n)\n    return tuplex_colon\n", "tests": ["test_out = colon_tuplex((\"HELLO\", 5, [], True) ,2,50)\nassert test_out==(\"HELLO\", 5, [50], True), f'outputs {test_out}'", "test_out = colon_tuplex((\"HELLO\", 5, [], True) ,2,100)\nassert test_out==((\"HELLO\", 5, [100],True)), f'outputs {test_out}'", "test_out = colon_tuplex((\"HELLO\", 5, [], True) ,2,500)\nassert test_out==(\"HELLO\", 5, [500], True), f'outputs {test_out}'"], "atol": ""}
{"task_id": 308, "problem": "def large_product(nums1, nums2, N):\n    \"\"\" Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n", "contract": "", "function_name": "large_product", "function_signature": "def large_product(nums1, nums2, N):\n", "canonical_solution": "\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n", "tests": ["test_out = large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\nassert test_out==[60, 54, 50], f'outputs {test_out}'", "test_out = large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)\nassert test_out==[60, 54, 50, 48], f'outputs {test_out}'", "test_out = large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)\nassert test_out==[60, 54, 50, 48, 45], f'outputs {test_out}'"], "atol": ""}
{"task_id": 309, "problem": "def maximum(a,b):\n    \"\"\" Write a python function to find the maximum of two numbers.\n    \"\"\"\n", "contract": "", "function_name": "maximum", "function_signature": "def maximum(a,b):\n", "canonical_solution": "\n    if a >= b: \n        return a \n    else: \n        return b\n", "tests": ["test_out = maximum(5,10)\nassert test_out == 10, f'outputs {test_out}'", "test_out = maximum(-1,-2)\nassert test_out == -1, f'outputs {test_out}'", "test_out = maximum(9,7)\nassert test_out == 9, f'outputs {test_out}'"], "atol": ""}
{"task_id": 310, "problem": "def string_to_tuple(str1):\n    \"\"\" Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n", "contract": "", "function_name": "string_to_tuple", "function_signature": "def string_to_tuple(str1):\n", "canonical_solution": "\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\n", "tests": ["test_out = string_to_tuple(\"python 3.0\")\nassert test_out==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'), f'outputs {test_out}'", "test_out = string_to_tuple(\"item1\")\nassert test_out==('i', 't', 'e', 'm', '1'), f'outputs {test_out}'", "test_out = string_to_tuple(\"15.10\")\nassert test_out==('1', '5', '.', '1', '0'), f'outputs {test_out}'"], "atol": ""}
{"task_id": 311, "problem": "def set_left_most_unset_bit(n):\n    \"\"\" Write a python function to set the left most unset bit.\n    \"\"\"\n", "contract": "", "function_name": "set_left_most_unset_bit", "function_signature": "def set_left_most_unset_bit(n):\n", "canonical_solution": "\n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n             pos = count       \n        count += 1; temp>>=1\n    return (n | (1 << (pos)))\n", "tests": ["test_out = set_left_most_unset_bit(10)\nassert test_out == 14, f'outputs {test_out}'", "test_out = set_left_most_unset_bit(12)\nassert test_out == 14, f'outputs {test_out}'", "test_out = set_left_most_unset_bit(15)\nassert test_out == 15, f'outputs {test_out}'"], "atol": ""}
{"task_id": 312, "problem": "def volume_cone(r,h):\n    \"\"\" Write a function to find the volume of a cone.\n    \"\"\"\n", "contract": "", "function_name": "volume_cone", "function_signature": "def volume_cone(r,h):\n", "canonical_solution": "    import math\n\n    volume = (1.0/3) * math.pi * r * r * h\n    return volume\n", "tests": ["import math\ntest_out = volume_cone(5,12)\nassert math.isclose(test_out, 314.15926535897927, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = volume_cone(10,15)\nassert math.isclose(test_out, 1570.7963267948965, rel_tol=0.001), f'outputs {test_out}'", "import math\ntest_out = volume_cone(19,17)\nassert math.isclose(test_out, 6426.651371693521, rel_tol=0.001), f'outputs {test_out}'"], "atol": ""}
{"task_id": 388, "problem": "def highest_Power_of_2(n):\n    \"\"\" Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n", "contract": "", "function_name": "highest_Power_of_2", "function_signature": "def highest_Power_of_2(n):\n", "canonical_solution": "\n    res = 0 \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n             res = i \n             break \n    return res\n", "tests": ["test_out = highest_Power_of_2(10)\nassert test_out == 8, f'outputs {test_out}'", "test_out = highest_Power_of_2(19)\nassert test_out == 16, f'outputs {test_out}'", "test_out = highest_Power_of_2(32)\nassert test_out == 32, f'outputs {test_out}'"], "atol": ""}
{"task_id": 389, "problem": "def find_lucas(n):\n    \"\"\" Write a function to find the n'th lucas number.\n    \"\"\"\n", "contract": "", "function_name": "find_lucas", "function_signature": "def find_lucas(n):\n", "canonical_solution": "\n    if (n == 0): \n        return 2\n    if (n == 1): \n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n", "tests": ["test_out = find_lucas(9)\nassert test_out == 76, f'outputs {test_out}'", "test_out = find_lucas(4)\nassert test_out == 7, f'outputs {test_out}'", "test_out = find_lucas(3)\nassert test_out == 4, f'outputs {test_out}'"], "atol": ""}
{"task_id": 390, "problem": "def add_string(list_, string):\n    \"\"\" Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n", "contract": "", "function_name": "add_string", "function_signature": "def add_string(list_, string):\n", "canonical_solution": "\n    add_string=[string.format(i)    for    i    in        list_]\n    return    add_string\n", "tests": ["test_out = add_string([1,2,3,4],'temp{0}')\nassert test_out==['temp1', 'temp2', 'temp3', 'temp4'], f'outputs {test_out}'", "test_out = add_string(['a','b','c','d'], 'python{0}')\nassert test_out==[ 'pythona', 'pythonb', 'pythonc', 'pythond'], f'outputs {test_out}'", "test_out = add_string([5,6,7,8],'string{0}')\nassert test_out==['string5', 'string6', 'string7', 'string8'], f'outputs {test_out}'"], "atol": ""}
{"task_id": 391, "problem": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\" Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n", "contract": "", "function_name": "convert_list_dictionary", "function_signature": "def convert_list_dictionary(l1, l2, l3):\n", "canonical_solution": "\n    result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n    return result\n", "tests": ["test_out = convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\nassert test_out==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}], f'outputs {test_out}'", "test_out = convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])\nassert test_out==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}], f'outputs {test_out}'", "test_out = convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])\nassert test_out==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}], f'outputs {test_out}'"], "atol": ""}
{"task_id": 392, "problem": "def get_max_sum (n):\n    \"\"\" Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n", "contract": "", "function_name": "get_max_sum", "function_signature": "def get_max_sum (n):\n", "canonical_solution": "\n    res = list()\n    res.append(0)\n    res.append(1)\n    i = 2\n    while i<n + 1:\n        res.append(max(i, (res[int(i / 2)] \n                          + res[int(i / 3)] +\n                              res[int(i / 4)]\n                          + res[int(i / 5)])))\n        i = i + 1\n    return res[n]\n", "tests": ["test_out = get_max_sum(60)\nassert test_out == 106, f'outputs {test_out}'", "test_out = get_max_sum(10)\nassert test_out == 12, f'outputs {test_out}'", "test_out = get_max_sum(2)\nassert test_out == 2, f'outputs {test_out}'"], "atol": ""}
{"task_id": 393, "problem": "def max_length_list(input_list):\n    \"\"\" Write a function to find the list with maximum length.\n    \"\"\"\n", "contract": "", "function_name": "max_length_list", "function_signature": "def max_length_list(input_list):\n", "canonical_solution": "\n    max_length = max(len(x) for x in input_list )    \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)\n", "tests": ["test_out = max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\nassert test_out==(3, [13, 15, 17]), f'outputs {test_out}'", "test_out = max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])\nassert test_out==(5,[1,2,3,4,5]), f'outputs {test_out}'", "test_out = max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])\nassert test_out==(4,[6,7,8,9]), f'outputs {test_out}'"], "atol": ""}
{"task_id": 394, "problem": "def check_distinct(test_tup):\n    \"\"\" Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n", "contract": "", "function_name": "check_distinct", "function_signature": "def check_distinct(test_tup):\n", "canonical_solution": "\n    res = True\n    temp = set()\n    for ele in test_tup:\n        if ele in temp:\n            res = False\n            break\n        temp.add(ele)\n    return res\n", "tests": ["test_out = check_distinct((1, 4, 5, 6, 1, 4))\nassert test_out == False, f'outputs {test_out}'", "test_out = check_distinct((1, 4, 5, 6))\nassert test_out == True, f'outputs {test_out}'", "test_out = check_distinct((2, 3, 4, 5, 6))\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 395, "problem": "def first_non_repeating_character(str1):\n    \"\"\" Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n", "contract": "", "function_name": "first_non_repeating_character", "function_signature": "def first_non_repeating_character(str1):\n", "canonical_solution": "\n    char_order = []\n    ctr = {}\n    for c in str1:\n        if c in ctr:\n            ctr[c] += 1\n        else:\n            ctr[c] = 1 \n            char_order.append(c)\n    for c in char_order:\n        if ctr[c] == 1:\n            return c\n    return None\n", "tests": ["test_out = first_non_repeating_character(\"abcabc\")\nassert test_out == None, f'outputs {test_out}'", "test_out = first_non_repeating_character(\"abc\")\nassert test_out == \"a\", f'outputs {test_out}'", "test_out = first_non_repeating_character(\"ababc\")\nassert test_out == \"c\", f'outputs {test_out}'"], "atol": ""}
{"task_id": 396, "problem": "def check_char(string):\n    \"\"\" Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n", "contract": "", "function_name": "check_char", "function_signature": "def check_char(string):\n", "canonical_solution": "    import re\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n\n    if(re.search(regex, string)): \n        return \"Valid\" \n    else: \n        return \"Invalid\"\n", "tests": ["test_out = check_char(\"abba\")\nassert test_out == \"Valid\", f'outputs {test_out}'", "test_out = check_char(\"a\")\nassert test_out == \"Valid\", f'outputs {test_out}'", "test_out = check_char(\"abcd\")\nassert test_out == \"Invalid\", f'outputs {test_out}'"], "atol": ""}
{"task_id": 397, "problem": "def median_numbers(a,b,c):\n    \"\"\" Write a function to find the median of three numbers.\n    \"\"\"\n", "contract": "", "function_name": "median_numbers", "function_signature": "def median_numbers(a,b,c):\n", "canonical_solution": "\n    if    a    >    b:\n                if    a    <    c:\n                                median    =    a\n                elif    b    >    c:\n                                median    =    b\n                else:\n                                median    =    c\n    else:\n                if    a    >    c:\n                                median    =    a\n                elif    b    <    c:\n                                median    =    b\n                else:\n                                median    =    c\n    return    median\n", "tests": ["test_out = median_numbers(25,55,65)\nassert test_out==55.0, f'outputs {test_out}'", "test_out = median_numbers(20,10,30)\nassert test_out==20.0, f'outputs {test_out}'", "test_out = median_numbers(15,45,75)\nassert test_out==45.0, f'outputs {test_out}'"], "atol": ""}
{"task_id": 398, "problem": "def sum_of_digits(nums):\n    \"\"\" Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n", "contract": "", "function_name": "sum_of_digits", "function_signature": "def sum_of_digits(nums):\n", "canonical_solution": "\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n", "tests": ["test_out = sum_of_digits([10,2,56])\nassert test_out==14, f'outputs {test_out}'", "test_out = sum_of_digits([[10,20,4,5,'b',70,'a']])\nassert test_out==19, f'outputs {test_out}'", "test_out = sum_of_digits([10,20,-4,5,-70])\nassert test_out==19, f'outputs {test_out}'"], "atol": ""}
{"task_id": 399, "problem": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\" Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n", "contract": "", "function_name": "bitwise_xor", "function_signature": "def bitwise_xor(test_tup1, test_tup2):\n", "canonical_solution": "\n    res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res)\n", "tests": ["test_out = bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\nassert test_out == (15, 6, 5, 10), f'outputs {test_out}'", "test_out = bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4))\nassert test_out == (13, 6, 3, 14), f'outputs {test_out}'", "test_out = bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6))\nassert test_out == (11, 2, 13, 13), f'outputs {test_out}'"], "atol": ""}
{"task_id": 400, "problem": "def extract_freq(test_list):\n    \"\"\" Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n", "contract": "", "function_name": "extract_freq", "function_signature": "def extract_freq(test_list):\n", "canonical_solution": "\n    res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n    return (res)\n", "tests": ["test_out = extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] )\nassert test_out == 3, f'outputs {test_out}'", "test_out = extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] )\nassert test_out == 4, f'outputs {test_out}'", "test_out = extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] )\nassert test_out == 4, f'outputs {test_out}'"], "atol": ""}
{"task_id": 401, "problem": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\" Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n", "contract": "", "function_name": "add_nested_tuples", "function_signature": "def add_nested_tuples(test_tup1, test_tup2):\n", "canonical_solution": "\n    res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n     for tup1, tup2 in zip(test_tup1, test_tup2))\n    return (res)\n", "tests": ["test_out = add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\nassert test_out == ((7, 10), (7, 14), (3, 10), (8, 13)), f'outputs {test_out}'", "test_out = add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\nassert test_out == ((9, 12), (9, 16), (5, 12), (10, 15)), f'outputs {test_out}'", "test_out = add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\nassert test_out == ((11, 14), (11, 18), (7, 14), (12, 17)), f'outputs {test_out}'"], "atol": ""}
{"task_id": 404, "problem": "def minimum(a,b):\n    \"\"\" Write a python function to find the minimum of two numbers.\n    \"\"\"\n", "contract": "", "function_name": "minimum", "function_signature": "def minimum(a,b):\n", "canonical_solution": "\n    if a <= b: \n        return a \n    else: \n        return b\n", "tests": ["test_out = minimum(1,2)\nassert test_out == 1, f'outputs {test_out}'", "test_out = minimum(-5,-4)\nassert test_out == -5, f'outputs {test_out}'", "test_out = minimum(0,0)\nassert test_out == 0, f'outputs {test_out}'"], "atol": ""}
{"task_id": 405, "problem": "def check_tuplex(tuplex,tuple1):\n    \"\"\" Write a function to check whether an element exists within a tuple.\n    \"\"\"\n", "contract": "", "function_name": "check_tuplex", "function_signature": "def check_tuplex(tuplex,tuple1):\n", "canonical_solution": "\n    if tuple1 in tuplex:\n        return True\n    else:\n         return False\n", "tests": ["test_out = check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')\nassert test_out==True, f'outputs {test_out}'", "test_out = check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')\nassert test_out==False, f'outputs {test_out}'", "test_out = check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)\nassert test_out==True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 406, "problem": "def find_Parity(x):\n    \"\"\" Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n", "contract": "", "function_name": "find_Parity", "function_signature": "def find_Parity(x):\n", "canonical_solution": "\n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return True\n    return False\n", "tests": ["test_out = find_Parity(12)\nassert test_out == False, f'outputs {test_out}'", "test_out = find_Parity(7)\nassert test_out == True, f'outputs {test_out}'", "test_out = find_Parity(10)\nassert test_out == False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 407, "problem": "def rearrange_bigger(n):\n    \"\"\" Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n", "contract": "", "function_name": "rearrange_bigger", "function_signature": "def rearrange_bigger(n):\n", "canonical_solution": "\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n             z = nums[i:]\n             y = min(filter(lambda x: x > z[0], z))\n             z.remove(y)\n             z.sort()\n             nums[i:] = [y] + z\n             return int(\"\".join(nums))\n    return False\n", "tests": ["test_out = rearrange_bigger(12)\nassert test_out==21, f'outputs {test_out}'", "test_out = rearrange_bigger(10)\nassert test_out==False, f'outputs {test_out}'", "test_out = rearrange_bigger(102)\nassert test_out==120, f'outputs {test_out}'"], "atol": ""}
{"task_id": 408, "problem": "def k_smallest_pairs(nums1, nums2, k):\n    \"\"\" Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n", "contract": "", "function_name": "k_smallest_pairs", "function_signature": "def k_smallest_pairs(nums1, nums2, k):\n", "canonical_solution": "    import heapq\n\n    queue = []\n    def push(i, j):\n         if i < len(nums1) and j < len(nums2):\n              heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n         _, i, j = heapq.heappop(queue)\n         pairs.append([nums1[i], nums2[j]])\n         push(i, j + 1)\n         if j == 0:\n              push(i + 1, 0)\n    return pairs\n", "tests": ["test_out = k_smallest_pairs([1,3,7],[2,4,6],2)\nassert test_out==[[1, 2], [1, 4]], f'outputs {test_out}'", "test_out = k_smallest_pairs([1,3,7],[2,4,6],1)\nassert test_out==[[1, 2]], f'outputs {test_out}'", "test_out = k_smallest_pairs([1,3,7],[2,4,6],7)\nassert test_out==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]], f'outputs {test_out}'"], "atol": ""}
{"task_id": 409, "problem": "def min_product_tuple(list1):\n    \"\"\" Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n", "contract": "", "function_name": "min_product_tuple", "function_signature": "def min_product_tuple(list1):\n", "canonical_solution": "\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min\n", "tests": ["test_out = min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\nassert test_out==8, f'outputs {test_out}'", "test_out = min_product_tuple([(10,20), (15,2), (5,10)] )\nassert test_out==30, f'outputs {test_out}'", "test_out = min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )\nassert test_out==100, f'outputs {test_out}'"], "atol": ""}
{"task_id": 410, "problem": "def min_val(listval):\n    \"\"\" Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n", "contract": "", "function_name": "min_val", "function_signature": "def min_val(listval):\n", "canonical_solution": "\n    min_val = min(i for i in listval if isinstance(i, int))\n    return min_val\n", "tests": ["test_out = min_val(['Python', 3, 2, 4, 5, 'version'])\nassert test_out==2, f'outputs {test_out}'", "test_out = min_val(['Python', 15, 20, 25])\nassert test_out==15, f'outputs {test_out}'", "test_out = min_val(['Python', 30, 20, 40, 50, 'version'])\nassert test_out==20, f'outputs {test_out}'"], "atol": ""}
{"task_id": 411, "problem": "def snake_to_camel(word):\n    \"\"\" Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n", "contract": "", "function_name": "snake_to_camel", "function_signature": "def snake_to_camel(word):\n", "canonical_solution": "    import re\n\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "tests": ["test_out = snake_to_camel('android_tv')\nassert test_out == 'AndroidTv', f'outputs {test_out}'", "test_out = snake_to_camel('google_pixel')\nassert test_out == 'GooglePixel', f'outputs {test_out}'", "test_out = snake_to_camel('apple_watch')\nassert test_out == 'AppleWatch', f'outputs {test_out}'"], "atol": ""}
{"task_id": 412, "problem": "def remove_odd(l):\n    \"\"\" Write a python function to remove odd numbers from a given list.\n    \"\"\"\n", "contract": "", "function_name": "remove_odd", "function_signature": "def remove_odd(l):\n", "canonical_solution": "\n    for i in l:\n        if i % 2 != 0:\n             l.remove(i)\n    return l\n", "tests": ["test_out = remove_odd([1,2,3])\nassert test_out == [2], f'outputs {test_out}'", "test_out = remove_odd([2,4,6])\nassert test_out == [2,4,6], f'outputs {test_out}'", "test_out = remove_odd([10,20,3])\nassert test_out == [10,20], f'outputs {test_out}'"], "atol": ""}
{"task_id": 413, "problem": "def extract_nth_element(list1, n):\n    \"\"\" Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n", "contract": "", "function_name": "extract_nth_element", "function_signature": "def extract_nth_element(list1, n):\n", "canonical_solution": "\n    result = [x[n] for x in list1]\n    return result\n", "tests": ["test_out = extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)\nassert test_out==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull'], f'outputs {test_out}'", "test_out = extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)\nassert test_out==[99, 96, 94, 98], f'outputs {test_out}'", "test_out = extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)\nassert test_out==[98, 97, 91, 94], f'outputs {test_out}'"], "atol": ""}
{"task_id": 414, "problem": "def overlapping(list1,list2):\n    \"\"\" Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n", "contract": "", "function_name": "overlapping", "function_signature": "def overlapping(list1,list2):\n", "canonical_solution": "\n    for i in range(len(list1)): \n        for j in range(len(list2)): \n             if(list1[i]==list2[j]): \n                 return True\n    return False\n", "tests": ["test_out = overlapping([1,2,3,4,5],[6,7,8,9])\nassert test_out == False, f'outputs {test_out}'", "test_out = overlapping([1,2,3],[4,5,6])\nassert test_out == False, f'outputs {test_out}'", "test_out = overlapping([1,4,5],[1,4,5])\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 415, "problem": "def max_Product(arr):\n    \"\"\" Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n", "contract": "", "function_name": "max_Product", "function_signature": "def max_Product(arr):\n", "canonical_solution": "\n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")            \n    x = arr[0]; y = arr[1]       \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n             if (arr[i] * arr[j] > x * y): \n                 x = arr[i]; y = arr[j] \n    return x,y\n", "tests": ["test_out = max_Product([1,2,3,4,7,0,8,4])\nassert test_out == (7,8), f'outputs {test_out}'", "test_out = max_Product([0,-1,-2,-4,5,0,-6])\nassert test_out == (-4,-6), f'outputs {test_out}'", "test_out = max_Product([1,2,3])\nassert test_out == (2,3), f'outputs {test_out}'"], "atol": ""}
{"task_id": 417, "problem": "def group_tuples(Input):\n    \"\"\" Write a function to find common first element in given list of tuple.\n    \"\"\"\n", "contract": "", "function_name": "group_tuples", "function_signature": "def group_tuples(Input):\n", "canonical_solution": "\n    out = {} \n    for elem in Input: \n        try: \n             out[elem[0]].extend(elem[1:]) \n        except KeyError: \n             out[elem[0]] = list(elem) \n    return [tuple(values) for values in out.values()]\n", "tests": ["test_out = group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\nassert test_out == [('x', 'y', 'z'), ('w', 't')], f'outputs {test_out}'", "test_out = group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')])\nassert test_out == [('a', 'b', 'c'), ('d', 'e')], f'outputs {test_out}'", "test_out = group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')])\nassert test_out == [('f', 'g', 'g'), ('h', 'i')], f'outputs {test_out}'"], "atol": ""}
{"task_id": 418, "problem": "def Find_Max(lst):\n    \"\"\" Write a python function to find the element of a list having maximum length.\n    \"\"\"\n", "contract": "", "function_name": "Find_Max", "function_signature": "def Find_Max(lst):\n", "canonical_solution": "\n    maxList = max((x) for x in lst) \n    return maxList\n", "tests": ["test_out = Find_Max([['A'],['A','B'],['A','B','C']])\nassert test_out == ['A','B','C'], f'outputs {test_out}'", "test_out = Find_Max([[1],[1,2],[1,2,3]])\nassert test_out == [1,2,3], f'outputs {test_out}'", "test_out = Find_Max([[1,1],[1,2,3],[1,5,6,1]])\nassert test_out == [1,5,6,1], f'outputs {test_out}'"], "atol": ""}
{"task_id": 419, "problem": "def round_and_sum(list1):\n    \"\"\" Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n", "contract": "", "function_name": "round_and_sum", "function_signature": "def round_and_sum(list1):\n", "canonical_solution": "\n    lenght=len(list1)\n    round_and_sum=sum(list(map(round,list1))* lenght)\n    return round_and_sum\n", "tests": ["test_out = round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\nassert test_out==243, f'outputs {test_out}'", "test_out = round_and_sum([5,2,9,24.3,29])\nassert test_out==345, f'outputs {test_out}'", "test_out = round_and_sum([25.0,56.7,89.2])\nassert test_out==513, f'outputs {test_out}'"], "atol": ""}
{"task_id": 420, "problem": "def cube_Sum(n):\n    \"\"\" Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n", "contract": "", "function_name": "cube_Sum", "function_signature": "def cube_Sum(n):\n", "canonical_solution": "\n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum\n", "tests": ["test_out = cube_Sum(2)\nassert test_out == 72, f'outputs {test_out}'", "test_out = cube_Sum(3)\nassert test_out == 288, f'outputs {test_out}'", "test_out = cube_Sum(4)\nassert test_out == 800, f'outputs {test_out}'"], "atol": ""}
{"task_id": 421, "problem": "def concatenate_tuple(test_tup):\n    \"\"\" Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n", "contract": "", "function_name": "concatenate_tuple", "function_signature": "def concatenate_tuple(test_tup):\n", "canonical_solution": "\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res))\n", "tests": ["test_out = concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\nassert test_out == 'ID-is-4-UTS', f'outputs {test_out}'", "test_out = concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") )\nassert test_out == 'QWE-is-4-RTY', f'outputs {test_out}'", "test_out = concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") )\nassert test_out == 'ZEN-is-4-OP', f'outputs {test_out}'"], "atol": ""}
{"task_id": 422, "problem": "def find_Average_Of_Cube(n):\n    \"\"\" Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n", "contract": "", "function_name": "find_Average_Of_Cube", "function_signature": "def find_Average_Of_Cube(n):\n", "canonical_solution": "\n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6)\n", "tests": ["test_out = find_Average_Of_Cube(2)\nassert test_out == 4.5, f'outputs {test_out}'", "test_out = find_Average_Of_Cube(3)\nassert test_out == 12, f'outputs {test_out}'", "test_out = find_Average_Of_Cube(1)\nassert test_out == 1, f'outputs {test_out}'"], "atol": ""}
{"task_id": 424, "problem": "def extract_rear(test_tuple):\n    \"\"\" Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n", "contract": "", "function_name": "extract_rear", "function_signature": "def extract_rear(test_tuple):\n", "canonical_solution": "\n    res = list(sub[len(sub) - 1] for sub in test_tuple)\n    return (res)\n", "tests": ["test_out = extract_rear(('Mers', 'for', 'Vers') )\nassert test_out == ['s', 'r', 's'], f'outputs {test_out}'", "test_out = extract_rear(('Avenge', 'for', 'People') )\nassert test_out == ['e', 'r', 'e'], f'outputs {test_out}'", "test_out = extract_rear(('Gotta', 'get', 'go') )\nassert test_out == ['a', 't', 'o'], f'outputs {test_out}'"], "atol": ""}
{"task_id": 425, "problem": "def count_element_in_list(list1, x):\n    \"\"\" Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n", "contract": "", "function_name": "count_element_in_list", "function_signature": "def count_element_in_list(list1, x):\n", "canonical_solution": "\n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n             ctr+= 1           \n    return ctr\n", "tests": ["test_out = count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)\nassert test_out==3, f'outputs {test_out}'", "test_out = count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')\nassert test_out==3, f'outputs {test_out}'", "test_out = count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')\nassert test_out==1, f'outputs {test_out}'"], "atol": ""}
{"task_id": 426, "problem": "def filter_oddnumbers(nums):\n    \"\"\" Write a function to filter odd numbers.\n    \"\"\"\n", "contract": "", "function_name": "filter_oddnumbers", "function_signature": "def filter_oddnumbers(nums):\n", "canonical_solution": "\n    odd_nums    =    list(filter(lambda    x:    x%2    !=    0,    nums))\n    return    odd_nums\n", "tests": ["test_out = filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert test_out==[1,3,5,7,9], f'outputs {test_out}'", "test_out = filter_oddnumbers([10,20,45,67,84,93])\nassert test_out==[45,67,93], f'outputs {test_out}'", "test_out = filter_oddnumbers([5,7,9,8,6,4,3])\nassert test_out==[5,7,9,3], f'outputs {test_out}'"], "atol": ""}
{"task_id": 427, "problem": "def change_date_format(dt):\n    \"\"\" Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n", "contract": "", "function_name": "change_date_format", "function_signature": "def change_date_format(dt):\n", "canonical_solution": "    import re\n\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n", "tests": ["test_out = change_date_format(\"2026-01-02\")\nassert test_out == '02-01-2026', f'outputs {test_out}'", "test_out = change_date_format(\"2020-11-13\")\nassert test_out == '13-11-2020', f'outputs {test_out}'", "test_out = change_date_format(\"2021-04-26\")\nassert test_out == '26-04-2021', f'outputs {test_out}'"], "atol": ""}
{"task_id": 428, "problem": "def shell_sort(my_list):\n    \"\"\" Write a function to sort the given array by using shell sort.\n    \"\"\"\n", "contract": "", "function_name": "shell_sort", "function_signature": "def shell_sort(my_list):\n", "canonical_solution": "\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n             current_item = my_list[i]\n             j = i\n             while j >= gap and my_list[j - gap] > current_item:\n                 my_list[j] = my_list[j - gap]\n                 j -= gap\n             my_list[j] = current_item\n        gap //= 2\n\n    return my_list\n", "tests": ["test_out = shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\nassert test_out == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95], f'outputs {test_out}'", "test_out = shell_sort([24, 22, 39, 34, 87, 73, 68])\nassert test_out == [22, 24, 34, 39, 68, 73, 87], f'outputs {test_out}'", "test_out = shell_sort([32, 30, 16, 96, 82, 83, 74])\nassert test_out == [16, 30, 32, 74, 82, 83, 96], f'outputs {test_out}'"], "atol": ""}
{"task_id": 429, "problem": "def and_tuples(test_tup1, test_tup2):\n    \"\"\" Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n", "contract": "", "function_name": "and_tuples", "function_signature": "def and_tuples(test_tup1, test_tup2):\n", "canonical_solution": "\n    res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res)\n", "tests": ["test_out = and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\nassert test_out == (0, 0, 2, 1), f'outputs {test_out}'", "test_out = and_tuples((1, 2, 3, 4), (5, 6, 7, 8))\nassert test_out == (1, 2, 3, 0), f'outputs {test_out}'", "test_out = and_tuples((8, 9, 11, 12), (7, 13, 14, 17))\nassert test_out == (0, 9, 10, 0), f'outputs {test_out}'"], "atol": ""}
{"task_id": 430, "problem": "def parabola_directrix(a, b, c):\n    \"\"\" Write a function to find the directrix of a parabola.\n    \"\"\"\n", "contract": "", "function_name": "parabola_directrix", "function_signature": "def parabola_directrix(a, b, c):\n", "canonical_solution": "\n    directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n    return directrix\n", "tests": ["test_out = parabola_directrix(5,3,2)\nassert test_out==-198, f'outputs {test_out}'", "test_out = parabola_directrix(9,8,4)\nassert test_out==-2336, f'outputs {test_out}'", "test_out = parabola_directrix(2,4,6)\nassert test_out==-130, f'outputs {test_out}'"], "atol": ""}
{"task_id": 431, "problem": "def common_element(list1, list2):\n    \"\"\" Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n", "contract": "", "function_name": "common_element", "function_signature": "def common_element(list1, list2):\n", "canonical_solution": "\n    result = False\n    for x in list1:\n        for y in list2:\n             if x == y:\n                result = True\n                return result\n", "tests": ["test_out = common_element([1,2,3,4,5], [5,6,7,8,9])\nassert test_out==True, f'outputs {test_out}'", "test_out = common_element([1,2,3,4,5], [6,7,8,9])\nassert test_out==None, f'outputs {test_out}'", "test_out = common_element(['a','b','c'], ['d','b','e'])\nassert test_out==True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 432, "problem": "def median_trapezium(base1,base2,height):\n    \"\"\" Write a function to find the median length of a trapezium.\n    \"\"\"\n", "contract": "", "function_name": "median_trapezium", "function_signature": "def median_trapezium(base1,base2,height):\n", "canonical_solution": "\n    median    =    0.5    *    (base1+    base2)\n    return    median\n", "tests": ["test_out = median_trapezium(15,25,35)\nassert test_out==20, f'outputs {test_out}'", "test_out = median_trapezium(10,20,30)\nassert test_out==15, f'outputs {test_out}'", "test_out = median_trapezium(6,9,4)\nassert test_out==7.5, f'outputs {test_out}'"], "atol": ""}
{"task_id": 433, "problem": "def check_greater(arr, number):\n    \"\"\" Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n", "contract": "", "function_name": "check_greater", "function_signature": "def check_greater(arr, number):\n", "canonical_solution": "\n    arr.sort()\n    return number > arr[-1]\n", "tests": ["test_out = check_greater([1, 2, 3, 4, 5], 4)\nassert test_out == False, f'outputs {test_out}'", "test_out = check_greater([2, 3, 4, 5, 6], 8)\nassert test_out == True, f'outputs {test_out}'", "test_out = check_greater([9, 7, 4, 8, 6, 1], 11)\nassert test_out == True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 434, "problem": "def text_match_one(text):\n    \"\"\" Write a function that matches a string that has an a followed by one or more b's.\n    \"\"\"\n", "contract": "", "function_name": "text_match_one", "function_signature": "def text_match_one(text):\n", "canonical_solution": "    import re\n\n    patterns = 'ab+?'\n    if re.search(patterns,  text):\n         return True\n    else:\n         return False\n", "tests": ["test_out = text_match_one(\"ac\")\nassert test_out==False, f'outputs {test_out}'", "test_out = text_match_one(\"dc\")\nassert test_out==False, f'outputs {test_out}'", "test_out = text_match_one(\"abba\")\nassert test_out==True, f'outputs {test_out}'"], "atol": ""}
{"task_id": 435, "problem": "def last_Digit(n) :\n    \"\"\" Write a python function to find the last digit of a given number.\n    \"\"\"\n", "contract": "", "function_name": "last_Digit", "function_signature": "def last_Digit(n) :\n", "canonical_solution": "\n    return (n % 10)\n", "tests": ["test_out = last_Digit(123)\nassert test_out == 3, f'outputs {test_out}'", "test_out = last_Digit(25)\nassert test_out == 5, f'outputs {test_out}'", "test_out = last_Digit(30)\nassert test_out == 0, f'outputs {test_out}'"], "atol": ""}
{"task_id": 436, "problem": "def neg_nos(list1):\n    \"\"\" Write a python function to return the negative numbers in a list.\n    \"\"\"\n", "contract": "", "function_name": "neg_nos", "function_signature": "def neg_nos(list1):\n", "canonical_solution": "\n    out = []\n    for num in list1: \n        if num < 0: \n            out.append(num)\n    return out\n", "tests": ["test_out = neg_nos([-1,4,5,-6])\nassert test_out == [-1,-6], f'outputs {test_out}'", "test_out = neg_nos([-1,-2,3,4])\nassert test_out == [-1,-2], f'outputs {test_out}'", "test_out = neg_nos([-7,-6,8,9])\nassert test_out == [-7,-6], f'outputs {test_out}'"], "atol": ""}
{"task_id": 437, "problem": "def remove_odd(str1):\n    \"\"\" Write a function to remove odd characters in a string.\n    \"\"\"\n", "contract": "", "function_name": "remove_odd", "function_signature": "def remove_odd(str1):\n", "canonical_solution": "\n    str2    =    ''\n    for    i    in    range(1,    len(str1)    +    1):\n                if(i    %    2    ==    0):\n                                str2    =    str2    +    str1[i    -    1]\n    return    str2\n", "tests": ["test_out = remove_odd(\"python\")\nassert test_out==(\"yhn\"), f'outputs {test_out}'", "test_out = remove_odd(\"program\")\nassert test_out==(\"rga\"), f'outputs {test_out}'", "test_out = remove_odd(\"language\")\nassert test_out==(\"agae\"), f'outputs {test_out}'"], "atol": ""}
{"task_id": 438, "problem": "def count_bidirectional(test_list):\n    \"\"\" Write a function to count bidirectional tuple pairs.\n    \"\"\"\n", "contract": "", "function_name": "count_bidirectional", "function_signature": "def count_bidirectional(test_list):\n", "canonical_solution": "\n    res = 0\n    for idx in range(0, len(test_list)):\n        for iidx in range(idx + 1, len(test_list)):\n            if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n                res += 1\n    return res\n", "tests": ["test_out = count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] )\nassert test_out == 3, f'outputs {test_out}'", "test_out = count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] )\nassert test_out == 2, f'outputs {test_out}'", "test_out = count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] )\nassert test_out == 4, f'outputs {test_out}'"], "atol": ""}
{"task_id": 439, "problem": "def multiple_to_single(L):\n    \"\"\" Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n", "contract": "", "function_name": "multiple_to_single", "function_signature": "def multiple_to_single(L):\n", "canonical_solution": "\n    x = int(\"\".join(map(str, L)))\n    return x\n", "tests": ["test_out = multiple_to_single([11, 33, 50])\nassert test_out==113350, f'outputs {test_out}'", "test_out = multiple_to_single([-1,2,3,4,5,6])\nassert test_out==-123456, f'outputs {test_out}'", "test_out = multiple_to_single([10,15,20,25])\nassert test_out==10152025, f'outputs {test_out}'"], "atol": ""}
{"task_id": 440, "problem": "def find_adverb_position(text):\n    \"\"\" Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n", "contract": "", "function_name": "find_adverb_position", "function_signature": "def find_adverb_position(text):\n", "canonical_solution": "    import re\n\n    for    m    in    re.finditer(r\"\\w+ly\",    text):\n                return    (m.start(),    m.end(),    m.group(0))\n", "tests": ["test_out = find_adverb_position(\"clearly!! we can see the sky\")\nassert test_out==(0, 7, 'clearly'), f'outputs {test_out}'", "test_out = find_adverb_position(\"seriously!! there are many roses\")\nassert test_out==(0, 9, 'seriously'), f'outputs {test_out}'", "test_out = find_adverb_position(\"unfortunately!! sita is going to home\")\nassert test_out==(0, 13, 'unfortunately'), f'outputs {test_out}'"], "atol": ""}
{"task_id": 441, "problem": "def surfacearea_cube(l):\n    \"\"\" Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n", "contract": "", "function_name": "surfacearea_cube", "function_signature": "def surfacearea_cube(l):\n", "canonical_solution": "\n    surfacearea= 6*l*l\n    return surfacearea\n", "tests": ["test_out = surfacearea_cube(5)\nassert test_out==150, f'outputs {test_out}'", "test_out = surfacearea_cube(3)\nassert test_out==54, f'outputs {test_out}'", "test_out = surfacearea_cube(10)\nassert test_out==600, f'outputs {test_out}'"], "atol": ""}
{"task_id": 442, "problem": "def positive_count(nums):\n    \"\"\" Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n", "contract": "", "function_name": "positive_count", "function_signature": "def positive_count(nums):\n", "canonical_solution": "    from array import array\n\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n             n1 += 1\n        else:\n           None\n    return round(n1/n,2)\n", "tests": ["test_out = positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\nassert test_out==0.54, f'outputs {test_out}'", "test_out = positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\nassert test_out==0.69, f'outputs {test_out}'", "test_out = positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\nassert test_out==0.56, f'outputs {test_out}'"], "atol": ""}
{"task_id": 443, "problem": "def largest_neg(list1):\n    \"\"\" Write a python function to find the largest negative number from the given list.\n    \"\"\"\n", "contract": "", "function_name": "largest_neg", "function_signature": "def largest_neg(list1):\n", "canonical_solution": "\n    max = list1[0] \n    for x in list1: \n        if x < max : \n              max = x  \n    return max\n", "tests": ["test_out = largest_neg([1,2,3,-4,-6])\nassert test_out == -6, f'outputs {test_out}'", "test_out = largest_neg([1,2,3,-8,-9])\nassert test_out == -9, f'outputs {test_out}'", "test_out = largest_neg([1,2,3,4,-1])\nassert test_out == -1, f'outputs {test_out}'"], "atol": ""}
{"task_id": 444, "problem": "def trim_tuple(test_list, K):\n    \"\"\" Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n", "contract": "", "function_name": "trim_tuple", "function_signature": "def trim_tuple(test_list, K):\n", "canonical_solution": "\n    res = []\n    for ele in test_list:\n        N = len(ele)\n        res.append(tuple(list(ele)[K: N - K]))\n    return (str(res))\n", "tests": ["test_out = trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)\nassert test_out == '[(2,), (9,), (2,), (2,)]', f'outputs {test_out}'", "test_out = trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1)\nassert test_out == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]', f'outputs {test_out}'", "test_out = trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1)\nassert test_out == '[(8, 4), (8, 12), (1, 7), (6, 9)]', f'outputs {test_out}'"], "atol": ""}
{"task_id": 445, "problem": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\" Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n", "contract": "", "function_name": "index_multiplication", "function_signature": "def index_multiplication(test_tup1, test_tup2):\n", "canonical_solution": "\n    res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n     for tup1, tup2 in zip(test_tup1, test_tup2))\n    return (res)\n", "tests": ["test_out = index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\nassert test_out == ((6, 21), (12, 45), (2, 9), (7, 30)), f'outputs {test_out}'", "test_out = index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) )\nassert test_out == ((14, 32), (20, 60), (6, 20), (16, 44)), f'outputs {test_out}'", "test_out = index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) )\nassert test_out == ((24, 45), (30, 77), (12, 33), (27, 60)), f'outputs {test_out}'"], "atol": ""}
{"task_id": 446, "problem": "def count_Occurrence(tup, lst):\n    \"\"\" Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n", "contract": "", "function_name": "count_Occurrence", "function_signature": "def count_Occurrence(tup, lst):\n", "canonical_solution": "    from collections import Counter\n\n    count = 0\n    for item in tup: \n        if item in lst: \n             count+= 1 \n    return count\n", "tests": ["test_out = count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] )\nassert test_out == 3, f'outputs {test_out}'", "test_out = count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7])\nassert test_out == 6, f'outputs {test_out}'", "test_out = count_Occurrence((1,2,3,4,5,6),[1,2])\nassert test_out == 2, f'outputs {test_out}'"], "atol": ""}
{"task_id": 447, "problem": "def cube_nums(nums):\n    \"\"\" Write a function to find cubes of individual elements in a list.\n    \"\"\"\n", "contract": "", "function_name": "cube_nums", "function_signature": "def cube_nums(nums):\n", "canonical_solution": "\n    cube_nums    =    list(map(lambda    x:    x    **    3,    nums))\n    return    cube_nums\n", "tests": ["test_out = cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nassert test_out==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000], f'outputs {test_out}'", "test_out = cube_nums([10,20,30])\nassert test_out==([1000, 8000, 27000]), f'outputs {test_out}'", "test_out = cube_nums([12,15])\nassert test_out==([1728, 3375]), f'outputs {test_out}'"], "atol": ""}
{"task_id": 448, "problem": "def cal_sum(n):\n    \"\"\" Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n", "contract": "", "function_name": "cal_sum", "function_signature": "def cal_sum(n):\n", "canonical_solution": "\n    a = 3\n    b = 0\n    c = 2\n    if (n == 0): \n        return 3\n    if (n == 1): \n        return 3\n    if (n == 2): \n        return 5\n    sum = 5\n    while (n > 2): \n        d = a + b \n        sum = sum + d \n        a = b \n        b = c \n        c = d \n        n = n-1\n    return sum\n", "tests": ["test_out = cal_sum(9)\nassert test_out == 49, f'outputs {test_out}'", "test_out = cal_sum(10)\nassert test_out == 66, f'outputs {test_out}'", "test_out = cal_sum(11)\nassert test_out == 88, f'outputs {test_out}'"], "atol": ""}
{"task_id": 450, "problem": "def extract_string(str, l):\n    \"\"\" Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n", "contract": "", "function_name": "extract_string", "function_signature": "def extract_string(str, l):\n", "canonical_solution": "\n    result = [e for e in str if len(e) == l] \n    return result\n", "tests": ["test_out = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)\nassert test_out==['practice', 'solution'], f'outputs {test_out}'", "test_out = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)\nassert test_out==['Python'], f'outputs {test_out}'", "test_out = extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)\nassert test_out==['exercises'], f'outputs {test_out}'"], "atol": ""}
{"task_id": 451, "problem": "def remove_whitespaces(text1):\n    \"\"\" Write a function to remove all whitespaces from the given string.\n    \"\"\"\n", "contract": "", "function_name": "remove_whitespaces", "function_signature": "def remove_whitespaces(text1):\n", "canonical_solution": "    import re\n\n    return (re.sub(r'\\s+', '',text1))\n", "tests": ["test_out = remove_whitespaces(' Google    Flutter ')\nassert test_out == 'GoogleFlutter', f'outputs {test_out}'", "test_out = remove_whitespaces(' Google    Dart ')\nassert test_out == 'GoogleDart', f'outputs {test_out}'", "test_out = remove_whitespaces(' iOS    Swift ')\nassert test_out == 'iOSSwift', f'outputs {test_out}'"], "atol": ""}
{"task_id": 452, "problem": "def loss_amount(actual_cost,sale_amount):\n    \"\"\" Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n", "contract": "", "function_name": "loss_amount", "function_signature": "def loss_amount(actual_cost,sale_amount):\n", "canonical_solution": "\n    if(sale_amount > actual_cost):\n        amount = sale_amount - actual_cost\n        return amount\n    else:\n        return 0\n", "tests": ["test_out = loss_amount(1500,1200)\nassert test_out==0, f'outputs {test_out}'", "test_out = loss_amount(100,200)\nassert test_out==100, f'outputs {test_out}'", "test_out = loss_amount(2000,5000)\nassert test_out==3000, f'outputs {test_out}'"], "atol": ""}
{"task_id": 453, "problem": "def sumofFactors(n) :\n    \"\"\" Write a python function to find the sum of even factors of a number.\n    \"\"\"\n", "contract": "", "function_name": "sumofFactors", "function_signature": "def sumofFactors(n) :\n", "canonical_solution": "    import math\n\n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n             count= count + 1\n             n = n // i \n             if (i == 2 and count == 1) : \n                 curr_sum = 0\n             curr_term = curr_term * i \n             curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res\n", "tests": ["test_out = sumofFactors(18)\nassert test_out == 26, f'outputs {test_out}'", "test_out = sumofFactors(30)\nassert test_out == 48, f'outputs {test_out}'", "test_out = sumofFactors(6)\nassert test_out == 8, f'outputs {test_out}'"], "atol": ""}
{"task_id": 454, "problem": "def text_match_wordz(text):\n    \"\"\" Write a function that matches a word containing 'z'.\n    \"\"\"\n", "contract": "", "function_name": "text_match_wordz", "function_signature": "def text_match_wordz(text):\n", "canonical_solution": "    import re\n\n    patterns = '\\w*z.\\w*'\n    if re.search(patterns,  text):\n         return True\n    else:\n         return False\n", "tests": ["test_out = text_match_wordz(\"pythonz.\")\nassert test_out==True, f'outputs {test_out}'", "test_out = text_match_wordz(\"xyz.\")\nassert test_out==True, f'outputs {test_out}'", "test_out = text_match_wordz(\"  lang  .\")\nassert test_out==False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 455, "problem": "def check_monthnumb_number(monthnum2):\n    \"\"\" Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n", "contract": "", "function_name": "check_monthnumb_number", "function_signature": "def check_monthnumb_number(monthnum2):\n", "canonical_solution": "\n    if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n        return True\n    else:\n        return False\n", "tests": ["test_out = check_monthnumb_number(5)\nassert test_out==True, f'outputs {test_out}'", "test_out = check_monthnumb_number(2)\nassert test_out==False, f'outputs {test_out}'", "test_out = check_monthnumb_number(6)\nassert test_out==False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 456, "problem": "def reverse_string_list(stringlist):\n    \"\"\" Write a function to reverse each string in a given list of string values.\n    \"\"\"\n", "contract": "", "function_name": "reverse_string_list", "function_signature": "def reverse_string_list(stringlist):\n", "canonical_solution": "\n    result = [x[::-1] for x in stringlist]\n    return result\n", "tests": ["test_out = reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\nassert test_out==['deR', 'neerG', 'eulB', 'etihW', 'kcalB'], f'outputs {test_out}'", "test_out = reverse_string_list(['john','amal','joel','george'])\nassert test_out==['nhoj','lama','leoj','egroeg'], f'outputs {test_out}'", "test_out = reverse_string_list(['jack','john','mary'])\nassert test_out==['kcaj','nhoj','yram'], f'outputs {test_out}'"], "atol": ""}
{"task_id": 457, "problem": "def Find_Min(lst):\n    \"\"\" Write a python function to find the sublist having minimum length.\n    \"\"\"\n", "contract": "", "function_name": "Find_Min", "function_signature": "def Find_Min(lst):\n", "canonical_solution": "\n    return min(lst, key=len)\n", "tests": ["test_out = Find_Min([[1],[1,2],[1,2,3]])\nassert test_out == [1], f'outputs {test_out}'", "test_out = Find_Min([[1,1],[1,1,1],[1,2,7,8]])\nassert test_out == [1,1], f'outputs {test_out}'", "test_out = Find_Min([['x'],['x','y'],['x','y','z']])\nassert test_out == ['x'], f'outputs {test_out}'"], "atol": ""}
{"task_id": 458, "problem": "def rectangle_area(l,b):\n    \"\"\" Write a function to find the area of a rectangle.\n    \"\"\"\n", "contract": "", "function_name": "rectangle_area", "function_signature": "def rectangle_area(l,b):\n", "canonical_solution": "\n    area=l*b\n    return area\n", "tests": ["test_out = rectangle_area(10,20)\nassert test_out==200, f'outputs {test_out}'", "test_out = rectangle_area(10,5)\nassert test_out==50, f'outputs {test_out}'", "test_out = rectangle_area(4,2)\nassert test_out==8, f'outputs {test_out}'"], "atol": ""}
{"task_id": 459, "problem": "def remove_uppercase(str1):\n    \"\"\" Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n", "contract": "", "function_name": "remove_uppercase", "function_signature": "def remove_uppercase(str1):\n", "canonical_solution": "    import re\n\n    return re.sub('[A-Z]', '', str1)\n", "tests": ["test_out = remove_uppercase('cAstyoUrFavoRitETVshoWs')\nassert test_out == 'cstyoravoitshos', f'outputs {test_out}'", "test_out = remove_uppercase('wAtchTheinTernEtrAdIo')\nassert test_out == 'wtchheinerntrdo', f'outputs {test_out}'", "test_out = remove_uppercase('VoicESeaRchAndreComMendaTionS')\nassert test_out == 'oiceachndreomendaion', f'outputs {test_out}'"], "atol": ""}
{"task_id": 460, "problem": "def Extract(lst):\n    \"\"\" Write a python function to get the first element of each sublist.\n    \"\"\"\n", "contract": "", "function_name": "Extract", "function_signature": "def Extract(lst):\n", "canonical_solution": "\n    return [item[0] for item in lst]\n", "tests": ["test_out = Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\nassert test_out == [1, 3, 6], f'outputs {test_out}'", "test_out = Extract([[1,2,3],[4, 5]])\nassert test_out == [1,4], f'outputs {test_out}'", "test_out = Extract([[9,8,1],[1,2]])\nassert test_out == [9,1], f'outputs {test_out}'"], "atol": ""}
{"task_id": 461, "problem": "def upper_ctr(str):\n    \"\"\" Write a python function to count the upper case characters in a given string.\n    \"\"\"\n", "contract": "", "function_name": "upper_ctr", "function_signature": "def upper_ctr(str):\n", "canonical_solution": "\n    upper_ctr = 0\n    for i in range(len(str)):\n           if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n           return upper_ctr\n", "tests": ["test_out = upper_ctr('PYthon')\nassert test_out == 1, f'outputs {test_out}'", "test_out = upper_ctr('BigData')\nassert test_out == 1, f'outputs {test_out}'", "test_out = upper_ctr('program')\nassert test_out == 0, f'outputs {test_out}'"], "atol": ""}
{"task_id": 462, "problem": "def combinations_list(list1):\n    \"\"\" Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n", "contract": "", "function_name": "combinations_list", "function_signature": "def combinations_list(list1):\n", "canonical_solution": "\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\n", "tests": ["test_out = combinations_list(['orange', 'red', 'green', 'blue'])\nassert test_out==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']], f'outputs {test_out}'", "test_out = combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])\nassert test_out==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']], f'outputs {test_out}'", "test_out = combinations_list(['red', 'green', 'black', 'orange'])\nassert test_out==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']], f'outputs {test_out}'"], "atol": ""}
{"task_id": 463, "problem": "def max_subarray_product(arr):\n    \"\"\" Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n", "contract": "", "function_name": "max_subarray_product", "function_signature": "def max_subarray_product(arr):\n", "canonical_solution": "\n    n = len(arr)\n    max_ending_here = 1\n    min_ending_here = 1\n    max_so_far = 0\n    flag = 0\n    for i in range(0, n):\n        if arr[i] > 0:\n             max_ending_here = max_ending_here * arr[i]\n             min_ending_here = min (min_ending_here * arr[i], 1)\n             flag = 1\n        elif arr[i] == 0:\n             max_ending_here = 1\n             min_ending_here = 1\n        else:\n             temp = max_ending_here\n             max_ending_here = max (min_ending_here * arr[i], 1)\n             min_ending_here = temp * arr[i]\n        if (max_so_far < max_ending_here):\n             max_so_far = max_ending_here\n    if flag == 0 and max_so_far == 0:\n        return 0\n    return max_so_far\n", "tests": ["test_out = max_subarray_product([1, -2, -3, 0, 7, -8, -2])\nassert test_out == 112, f'outputs {test_out}'", "test_out = max_subarray_product([6, -3, -10, 0, 2])\nassert test_out == 180, f'outputs {test_out}'", "test_out = max_subarray_product([-2, -40, 0, -2, -3])\nassert test_out == 80, f'outputs {test_out}'"], "atol": ""}
{"task_id": 464, "problem": "def check_value(dict, n):\n    \"\"\" Write a function to check if all values are same in a dictionary.\n    \"\"\"\n", "contract": "", "function_name": "check_value", "function_signature": "def check_value(dict, n):\n", "canonical_solution": "\n    result = all(x == n for x in dict.values()) \n    return result\n", "tests": ["test_out = check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)\nassert test_out==False, f'outputs {test_out}'", "test_out = check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)\nassert test_out==True, f'outputs {test_out}'", "test_out = check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)\nassert test_out==False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 465, "problem": "def drop_empty(dict1):\n    \"\"\" Write a function to drop empty items from a given dictionary.\n    \"\"\"\n", "contract": "", "function_name": "drop_empty", "function_signature": "def drop_empty(dict1):\n", "canonical_solution": "\n    dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n    return dict1\n", "tests": ["test_out = drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\nassert test_out=={'c1': 'Red', 'c2': 'Green'}, f'outputs {test_out}'", "test_out = drop_empty({'c1': 'Red', 'c2': None, 'c3':None})\nassert test_out=={'c1': 'Red'}, f'outputs {test_out}'", "test_out = drop_empty({'c1': None, 'c2': 'Green', 'c3':None})\nassert test_out=={ 'c2': 'Green'}, f'outputs {test_out}'"], "atol": ""}
{"task_id": 468, "problem": "def max_product(arr):\n    \"\"\" Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n", "contract": "", "function_name": "max_product", "function_signature": "def max_product(arr):\n", "canonical_solution": "\n    n = len(arr)\n    mpis = arr[:]\n    for i in range(n): \n        current_prod = arr[i]\n        j = i + 1\n        while j < n:\n            if arr[j-1] > arr[j]: \n                break\n            current_prod *= arr[j]\n            if current_prod > mpis[j]:\n                mpis[j] = current_prod \n            j = j + 1\n    return max(mpis)\n", "tests": ["test_out = max_product([3, 100, 4, 5, 150, 6])\nassert test_out == 3000, f'outputs {test_out}'", "test_out = max_product([4, 42, 55, 68, 80])\nassert test_out == 50265600, f'outputs {test_out}'", "test_out = max_product([10, 22, 9, 33, 21, 50, 41, 60])\nassert test_out == 2460, f'outputs {test_out}'"], "atol": ""}
{"task_id": 470, "problem": "def add_pairwise(test_tup):\n    \"\"\" Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n", "contract": "", "function_name": "add_pairwise", "function_signature": "def add_pairwise(test_tup):\n", "canonical_solution": "\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n    return (res)\n", "tests": ["test_out = add_pairwise((1, 5, 7, 8, 10))\nassert test_out == (6, 12, 15, 18), f'outputs {test_out}'", "test_out = add_pairwise((2, 6, 8, 9, 11))\nassert test_out == (8, 14, 17, 20), f'outputs {test_out}'", "test_out = add_pairwise((3, 7, 9, 10, 12))\nassert test_out == (10, 16, 19, 22), f'outputs {test_out}'"], "atol": ""}
{"task_id": 471, "problem": "def find_remainder(arr, n):\n    \"\"\" Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n", "contract": "", "function_name": "find_remainder", "function_signature": "def find_remainder(arr, n):\n", "canonical_solution": "\n    mul = 1\n    for i in range(len(arr)):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n\n", "tests": ["test_out = find_remainder([ 100, 10, 5, 25, 35, 14 ],11)\nassert test_out ==9, f'outputs {test_out}'", "test_out = find_remainder([1,1,1],1)\nassert test_out == 0, f'outputs {test_out}'", "test_out = find_remainder([1,2,1],2)\nassert test_out == 0, f'outputs {test_out}'"], "atol": ""}
{"task_id": 472, "problem": "def check_Consecutive(l):\n    \"\"\" Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n", "contract": "", "function_name": "check_Consecutive", "function_signature": "def check_Consecutive(l):\n", "canonical_solution": "\n    return sorted(l) == list(range(min(l),max(l)+1))\n", "tests": ["test_out = check_Consecutive([1,2,3,4,5])\nassert test_out == True, f'outputs {test_out}'", "test_out = check_Consecutive([1,2,3,5,6])\nassert test_out == False, f'outputs {test_out}'", "test_out = check_Consecutive([1,2,1])\nassert test_out == False, f'outputs {test_out}'"], "atol": ""}
{"task_id": 473, "problem": "def tuple_intersection(test_list1, test_list2):\n    \"\"\" Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n", "contract": "", "function_name": "tuple_intersection", "function_signature": "def tuple_intersection(test_list1, test_list2):\n", "canonical_solution": "\n    res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n    return (res)\n", "tests": ["test_out = tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)])\nassert test_out == {(4, 5), (3, 4), (5, 6)}, f'outputs {test_out}'", "test_out = tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)])\nassert test_out == {(4, 7), (1, 4)}, f'outputs {test_out}'", "test_out = tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)])\nassert test_out == {(1, 3), (2, 3)}, f'outputs {test_out}'"], "atol": ""}
{"task_id": 474, "problem": "def replace_char(str1,ch,newch):\n    \"\"\" Write a function to replace characters in a string.\n    \"\"\"\n", "contract": "", "function_name": "replace_char", "function_signature": "def replace_char(str1,ch,newch):\n", "canonical_solution": "\n    str2    =    str1.replace(ch,    newch)\n    return    str2\n", "tests": ["test_out = replace_char(\"polygon\",'y','l')\nassert test_out==(\"pollgon\"), f'outputs {test_out}'", "test_out = replace_char(\"character\",'c','a')\nassert test_out==(\"aharaater\"), f'outputs {test_out}'", "test_out = replace_char(\"python\",'l','a')\nassert test_out==(\"python\"), f'outputs {test_out}'"], "atol": ""}
{"task_id": 475, "problem": "def sort_counter(dict1):\n    \"\"\" Write a function to sort a dictionary by value.\n    \"\"\"\n", "contract": "", "function_name": "sort_counter", "function_signature": "def sort_counter(dict1):\n", "canonical_solution": "    from collections import Counter\n\n    x    =    Counter(dict1)\n    sort_counter=x.most_common()\n    return    sort_counter\n", "tests": ["test_out = sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})\nassert test_out==[('Chemistry', 87), ('Physics', 83), ('Math', 81)], f'outputs {test_out}'", "test_out = sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})\nassert test_out==[('Math', 400), ('Physics', 300), ('Chemistry', 250)], f'outputs {test_out}'", "test_out = sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})\nassert test_out==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)], f'outputs {test_out}'"], "atol": ""}
{"task_id": 476, "problem": "def big_sum(nums):\n    \"\"\" Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n", "contract": "", "function_name": "big_sum", "function_signature": "def big_sum(nums):\n", "canonical_solution": "\n    sum= max(nums)+min(nums)\n    return sum\n", "tests": ["test_out = big_sum([1,2,3])\nassert test_out == 4, f'outputs {test_out}'", "test_out = big_sum([-1,2,3,4])\nassert test_out == 3, f'outputs {test_out}'", "test_out = big_sum([2,3,6])\nassert test_out == 8, f'outputs {test_out}'"], "atol": ""}
{"task_id": 477, "problem": "def is_lower(string):\n    \"\"\" Write a python function to convert the given string to lower case.\n    \"\"\"\n", "contract": "", "function_name": "is_lower", "function_signature": "def is_lower(string):\n", "canonical_solution": "\n    return (string.lower())\n", "tests": ["test_out = is_lower(\"InValid\")\nassert test_out == \"invalid\", f'outputs {test_out}'", "test_out = is_lower(\"TruE\")\nassert test_out == \"true\", f'outputs {test_out}'", "test_out = is_lower(\"SenTenCE\")\nassert test_out == \"sentence\", f'outputs {test_out}'"], "atol": ""}
{"task_id": 478, "problem": "def remove_lowercase(str1):\n    \"\"\" Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n", "contract": "", "function_name": "remove_lowercase", "function_signature": "def remove_lowercase(str1):\n", "canonical_solution": "    import re\n\n    return    re.sub('[a-z]',    '',    str1)\n", "tests": ["test_out = remove_lowercase(\"PYTHon\")\nassert test_out==('PYTH'), f'outputs {test_out}'", "test_out = remove_lowercase(\"FInD\")\nassert test_out==('FID'), f'outputs {test_out}'", "test_out = remove_lowercase(\"STRinG\")\nassert test_out==('STRG'), f'outputs {test_out}'"], "atol": ""}
{"task_id": 479, "problem": "def first_Digit(n) :\n    \"\"\" Write a python function to find the first digit of a given number.\n    \"\"\"\n", "contract": "", "function_name": "first_Digit", "function_signature": "def first_Digit(n) :\n", "canonical_solution": "\n    while n >= 10:  \n        n = n / 10 \n    return int(n)\n", "tests": ["test_out = first_Digit(123)\nassert test_out == 1, f'outputs {test_out}'", "test_out = first_Digit(456)\nassert test_out == 4, f'outputs {test_out}'", "test_out = first_Digit(12)\nassert test_out == 1, f'outputs {test_out}'"], "atol": ""}
